
-- File: prime.th
limit, num, counter: integer;

def prime(n: integer)-> boolean: 
   i: integer; 
   result, isPrime: boolean;
   
    if (n < 0):
        result = prime(-n);
    else: 
        if (n < 2): 
            result = False;    
        else: 
            if (n == 2): 
                result = True;
            else: 
                if (n % 2 == 0):
                    result = False;
                else:  
                    i = 3;
                    isPrime = True;
                    while (isPrime and (i < n / 2) ): 
                        isPrime = n % i != 0;
                        i = i + 2;
                    endwhile;
                    result = isPrime;
                endif;
            endif;
        endif;
  endif;
   
  return result;
enddef;

def printFibonacci(n: integer):
    i, n1, n2, n3: integer;
    n1 = 0;
    n2 = 1;
    writeInteger(n1);
    writeStr(" ");
    writeInteger(n2);

    for i in [2:n]:
        n3 = n1 + n2;
        writeStr(" ");
        writeInteger(n3);
        n1 = n2;
        n2 = n3;
    endfor;
enddef;

def main(): 

    n, i, fact, number, option: integer;
    writeStr("\nENTER: \t1 - Fibonacci\n\t2 - Factorial \n\t3 - Prime numbers\n\t0 - Terminate\n");
    option = readInteger();
 
    if (option == 1):
        writeStr("\nEnter the number of elements: ");
        n = readInteger();
        writeStr("\nFibonacci Series: ");
        printFibonacci(n);
        writeStr("\n");
    else:
        if (option == 2):
            fact = 1;
            writeStr("\nEnter a number: ");
            number = readInteger();
            for i in [1:number+1]:
                fact = fact * i;
            endfor;
            writeStr("\nFactorial of ");
            writeInteger(number);
            writeStr(" is: ");
            writeInteger(fact);
        else:
            if (option == 3):
                writeStr("Enter a number: ");
                limit = readInteger();  

                -- 2 is prime
                writeInteger(2);
                writeStr(" "); 

                counter = 1; -- count the prime numbers found
                -- check only odd numbers for primality  
                for num in [3: limit+1: 2]:  
                    if (prime(num)):  
                        counter = counter + 1;
                        writeInteger(num);
                        writeStr(" ");
                    endif;      
                endfor;
  
                writeStr("\nThe total number of primes found is: ");
                writeInteger(counter);
                writeStr("\n");  
            else:
                writeStr("Termination...");
            endif;
        endif;
    endif;
    writeStr("\n");
enddef;