Terminals unused in grammar

    KW_COMP
    KW_ENDCOMP


Grammar

    0 $accept: program $end

    1 program: decl_list

    2 ident: IDENTIFIER
    3      | IDENTIFIER ',' ident

    4 const: KW_CONST IDENTIFIER '=' expr ':' data_type ';'

    5 expr: '+' expr
    6     | '-' expr
    7     | expr OP_POWER expr
    8     | expr '+' expr
    9     | expr '-' expr
   10     | expr '*' expr
   11     | expr '/' expr
   12     | expr '%' expr
   13     | expr OP_EQUALS expr
   14     | expr OP_NOT_EQ expr
   15     | expr OP_LS expr
   16     | expr OP_GRT expr
   17     | expr OP_LS_EQ expr
   18     | expr OP_GRT_EQ expr
   19     | KW_NOT expr
   20     | expr KW_AND expr
   21     | expr KW_OR expr
   22     | '(' expr ')'
   23     | func_call
   24     | KW_TRUE
   25     | KW_FALSE
   26     | IDENTIFIER
   27     | IDENTIFIER '[' expr ']'
   28     | STRING
   29     | REAL
   30     | POSINT

   31 var: ident ':' data_type ';'
   32    | IDENTIFIER '[' POSINT ']' ':' data_type ';'
   33    | IDENTIFIER '[' ']' ':' data_type ';'

   34 func_body: %empty
   35          | var func_body
   36          | const func_body
   37          | instr func_body
   38          | if_stmt func_body

   39 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   40          | KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   41          | KW_DEF IDENTIFIER '(' parameters ')' ':' func_body KW_ENDDEF ';'

   42 func_call: IDENTIFIER '(' func_input ')'

   43 func_input: %empty
   44           | expr
   45           | expr ',' func_input

   46 parameters: %empty
   47           | IDENTIFIER ':' data_type
   48           | IDENTIFIER '[' ']' ':' data_type
   49           | IDENTIFIER ':' data_type ',' parameters
   50           | IDENTIFIER '[' ']' ':' data_type ',' parameters

   51 main_func: KW_DEF KW_MAIN '(' ')' ':' func_body KW_ENDDEF ';'

   52 decl_list: %empty
   53          | decl_list const
   54          | decl_list var
   55          | decl_list func_decl
   56          | decl_list main_func

   57 instr: assign_instr ';'
   58      | KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   60      | KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   61      | KW_BREAK ';'
   62      | KW_CONTINUE ';'
   63      | KW_RETURN ';'
   64      | KW_RETURN expr ';'
   65      | func_call ';'

   66 assign_instr: IDENTIFIER '=' expr
   67             | IDENTIFIER '[' expr ']' '=' expr
   68             | IDENTIFIER OP_ASGN_ADD expr
   69             | IDENTIFIER OP_ASGN_SUB expr
   70             | IDENTIFIER OP_ASGN_MUL expr
   71             | IDENTIFIER OP_ASGN_DIV expr
   72             | IDENTIFIER OP_ASGN_MOD expr

   73 stmts: instr
   74      | instr stmts
   75      | if_stmt
   76      | if_stmt stmts

   77 if_stmt: KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
   78        | KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

   79 data_type: KW_BOOL
   80          | KW_INT
   81          | KW_SCALAR
   82          | KW_STRING


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 12
    '(' (40) 22 39 40 41 42 51 60 77 78
    ')' (41) 22 39 40 41 42 51 60 77 78
    '*' (42) 10
    '+' (43) 5 8
    ',' (44) 3 45 49 50
    '-' (45) 6 9 39 40
    '/' (47) 11
    ':' (58) 4 31 32 33 39 40 41 47 48 49 50 51 58 59 60 77 78
    ';' (59) 4 31 32 33 39 40 41 51 57 58 59 60 61 62 63 64 65 77 78
    '=' (61) 4 66 67
    '[' (91) 27 32 33 40 48 50 58 59 67
    ']' (93) 27 32 33 40 48 50 58 59 67
    error (256)
    IDENTIFIER <crepr> (258) 2 3 4 26 27 32 33 39 40 41 42 47 48 49 50 58 59 66 67 68 69 70 71 72
    POSINT <crepr> (259) 30 32
    REAL <crepr> (260) 29
    STRING <crepr> (261) 28
    KW_INT (262) 80
    KW_SCALAR (263) 81
    KW_STRING (264) 82
    KW_BOOL (265) 79
    KW_TRUE (266) 24
    KW_FALSE (267) 25
    KW_CONST (268) 4
    KW_IF (269) 77 78
    KW_ELSE (270) 78
    KW_ENDIF (271) 77 78
    KW_FOR (272) 58 59
    KW_IN (273) 58 59
    KW_ENDFOR (274) 58 59
    KW_WHILE (275) 60
    KW_ENDWHILE (276) 60
    KW_BREAK (277) 61
    KW_CONTINUE (278) 62
    KW_NOT (279) 19
    KW_AND (280) 20
    KW_OR (281) 21
    KW_DEF (282) 39 40 41 51
    KW_ENDDEF (283) 39 40 41 51
    KW_COMP (284)
    KW_ENDCOMP (285)
    KW_RETURN (286) 63 64
    KW_MAIN (287) 51
    OP_ASGN_ADD (288) 68
    OP_ASGN_SUB (289) 69
    OP_ASGN_MUL (290) 70
    OP_ASGN_DIV (291) 71
    OP_ASGN_MOD (292) 72
    OP_POWER (293) 7
    OP_EQUALS (294) 13
    OP_NOT_EQ (295) 14
    OP_LS (296) 15
    OP_LS_EQ (297) 17
    OP_GRT (298) 16 39 40
    OP_GRT_EQ (299) 18
    OP_SIGN (300)


Nonterminals, with rules where they appear

    $accept (59)
        on left: 0
    program (60)
        on left: 1
        on right: 0
    ident <crepr> (61)
        on left: 2 3
        on right: 3 31
    const <crepr> (62)
        on left: 4
        on right: 36 53
    expr <crepr> (63)
        on left: 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
        on right: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 27 44 45 58 59 60 64 66 67 68 69 70 71 72 77 78
    var <crepr> (64)
        on left: 31 32 33
        on right: 35 54
    func_body <crepr> (65)
        on left: 34 35 36 37 38
        on right: 35 36 37 38 39 40 41 51
    func_decl <crepr> (66)
        on left: 39 40 41
        on right: 55
    func_call <crepr> (67)
        on left: 42
        on right: 23 65
    func_input <crepr> (68)
        on left: 43 44 45
        on right: 42 45
    parameters <crepr> (69)
        on left: 46 47 48 49 50
        on right: 39 40 41 49 50
    main_func <crepr> (70)
        on left: 51
        on right: 56
    decl_list <crepr> (71)
        on left: 52 53 54 55 56
        on right: 1 53 54 55 56
    instr <crepr> (72)
        on left: 57 58 59 60 61 62 63 64 65
        on right: 37 73 74
    assign_instr <crepr> (73)
        on left: 66 67 68 69 70 71 72
        on right: 57
    stmts <crepr> (74)
        on left: 73 74 75 76
        on right: 58 59 60 74 76 77 78
    if_stmt <crepr> (75)
        on left: 77 78
        on right: 38 75 76
    data_type <crepr> (76)
        on left: 79 80 81 82
        on right: 4 31 32 33 39 40 47 48 49 50


State 0

    0 $accept: . program $end
    1 program: . decl_list
   52 decl_list: . %empty
   53          | . decl_list const
   54          | . decl_list var
   55          | . decl_list func_decl
   56          | . decl_list main_func

    $default  reduce using rule 52 (decl_list)

    program    go to state 1
    decl_list  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: decl_list .  [$end]
    2 ident: . IDENTIFIER
    3      | . IDENTIFIER ',' ident
    4 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   31 var: . ident ':' data_type ';'
   32    | . IDENTIFIER '[' POSINT ']' ':' data_type ';'
   33    | . IDENTIFIER '[' ']' ':' data_type ';'
   39 func_decl: . KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   40          | . KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   41          | . KW_DEF IDENTIFIER '(' parameters ')' ':' func_body KW_ENDDEF ';'
   51 main_func: . KW_DEF KW_MAIN '(' ')' ':' func_body KW_ENDDEF ';'
   53 decl_list: decl_list . const
   54          | decl_list . var
   55          | decl_list . func_decl
   56          | decl_list . main_func

    IDENTIFIER  shift, and go to state 4
    KW_CONST    shift, and go to state 5
    KW_DEF      shift, and go to state 6

    $default  reduce using rule 1 (program)

    ident      go to state 7
    const      go to state 8
    var        go to state 9
    func_decl  go to state 10
    main_func  go to state 11


State 3

    0 $accept: program $end .

    $default  accept


State 4

    2 ident: IDENTIFIER .  [':']
    3      | IDENTIFIER . ',' ident
   32 var: IDENTIFIER . '[' POSINT ']' ':' data_type ';'
   33    | IDENTIFIER . '[' ']' ':' data_type ';'

    ','  shift, and go to state 12
    '['  shift, and go to state 13

    $default  reduce using rule 2 (ident)


State 5

    4 const: KW_CONST . IDENTIFIER '=' expr ':' data_type ';'

    IDENTIFIER  shift, and go to state 14


State 6

   39 func_decl: KW_DEF . IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   40          | KW_DEF . IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   41          | KW_DEF . IDENTIFIER '(' parameters ')' ':' func_body KW_ENDDEF ';'
   51 main_func: KW_DEF . KW_MAIN '(' ')' ':' func_body KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 15
    KW_MAIN     shift, and go to state 16


State 7

   31 var: ident . ':' data_type ';'

    ':'  shift, and go to state 17


State 8

   53 decl_list: decl_list const .

    $default  reduce using rule 53 (decl_list)


State 9

   54 decl_list: decl_list var .

    $default  reduce using rule 54 (decl_list)


State 10

   55 decl_list: decl_list func_decl .

    $default  reduce using rule 55 (decl_list)


State 11

   56 decl_list: decl_list main_func .

    $default  reduce using rule 56 (decl_list)


State 12

    2 ident: . IDENTIFIER
    3      | . IDENTIFIER ',' ident
    3      | IDENTIFIER ',' . ident

    IDENTIFIER  shift, and go to state 18

    ident  go to state 19


State 13

   32 var: IDENTIFIER '[' . POSINT ']' ':' data_type ';'
   33    | IDENTIFIER '[' . ']' ':' data_type ';'

    POSINT  shift, and go to state 20
    ']'     shift, and go to state 21


State 14

    4 const: KW_CONST IDENTIFIER . '=' expr ':' data_type ';'

    '='  shift, and go to state 22


State 15

   39 func_decl: KW_DEF IDENTIFIER . '(' parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   40          | KW_DEF IDENTIFIER . '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   41          | KW_DEF IDENTIFIER . '(' parameters ')' ':' func_body KW_ENDDEF ';'

    '('  shift, and go to state 23


State 16

   51 main_func: KW_DEF KW_MAIN . '(' ')' ':' func_body KW_ENDDEF ';'

    '('  shift, and go to state 24


State 17

   31 var: ident ':' . data_type ';'
   79 data_type: . KW_BOOL
   80          | . KW_INT
   81          | . KW_SCALAR
   82          | . KW_STRING

    KW_INT     shift, and go to state 25
    KW_SCALAR  shift, and go to state 26
    KW_STRING  shift, and go to state 27
    KW_BOOL    shift, and go to state 28

    data_type  go to state 29


State 18

    2 ident: IDENTIFIER .  [':']
    3      | IDENTIFIER . ',' ident

    ','  shift, and go to state 12

    $default  reduce using rule 2 (ident)


State 19

    3 ident: IDENTIFIER ',' ident .

    $default  reduce using rule 3 (ident)


State 20

   32 var: IDENTIFIER '[' POSINT . ']' ':' data_type ';'

    ']'  shift, and go to state 30


State 21

   33 var: IDENTIFIER '[' ']' . ':' data_type ';'

    ':'  shift, and go to state 31


State 22

    4 const: KW_CONST IDENTIFIER '=' . expr ':' data_type ';'
    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 42
    func_call  go to state 43


State 23

   39 func_decl: KW_DEF IDENTIFIER '(' . parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   40          | KW_DEF IDENTIFIER '(' . parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   41          | KW_DEF IDENTIFIER '(' . parameters ')' ':' func_body KW_ENDDEF ';'
   46 parameters: . %empty  [')']
   47           | . IDENTIFIER ':' data_type
   48           | . IDENTIFIER '[' ']' ':' data_type
   49           | . IDENTIFIER ':' data_type ',' parameters
   50           | . IDENTIFIER '[' ']' ':' data_type ',' parameters

    IDENTIFIER  shift, and go to state 44

    $default  reduce using rule 46 (parameters)

    parameters  go to state 45


State 24

   51 main_func: KW_DEF KW_MAIN '(' . ')' ':' func_body KW_ENDDEF ';'

    ')'  shift, and go to state 46


State 25

   80 data_type: KW_INT .

    $default  reduce using rule 80 (data_type)


State 26

   81 data_type: KW_SCALAR .

    $default  reduce using rule 81 (data_type)


State 27

   82 data_type: KW_STRING .

    $default  reduce using rule 82 (data_type)


State 28

   79 data_type: KW_BOOL .

    $default  reduce using rule 79 (data_type)


State 29

   31 var: ident ':' data_type . ';'

    ';'  shift, and go to state 47


State 30

   32 var: IDENTIFIER '[' POSINT ']' . ':' data_type ';'

    ':'  shift, and go to state 48


State 31

   33 var: IDENTIFIER '[' ']' ':' . data_type ';'
   79 data_type: . KW_BOOL
   80          | . KW_INT
   81          | . KW_SCALAR
   82          | . KW_STRING

    KW_INT     shift, and go to state 25
    KW_SCALAR  shift, and go to state 26
    KW_STRING  shift, and go to state 27
    KW_BOOL    shift, and go to state 28

    data_type  go to state 49


State 32

   26 expr: IDENTIFIER .  [KW_AND, KW_OR, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '+', '-', '*', '/', '%', ']', ',', ':', ';', ')']
   27     | IDENTIFIER . '[' expr ']'
   42 func_call: IDENTIFIER . '(' func_input ')'

    '('  shift, and go to state 50
    '['  shift, and go to state 51

    $default  reduce using rule 26 (expr)


State 33

   30 expr: POSINT .

    $default  reduce using rule 30 (expr)


State 34

   29 expr: REAL .

    $default  reduce using rule 29 (expr)


State 35

   28 expr: STRING .

    $default  reduce using rule 28 (expr)


State 36

   24 expr: KW_TRUE .

    $default  reduce using rule 24 (expr)


State 37

   25 expr: KW_FALSE .

    $default  reduce using rule 25 (expr)


State 38

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   19     | KW_NOT . expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 52
    func_call  go to state 43


State 39

    5 expr: . '+' expr
    5     | '+' . expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 53
    func_call  go to state 43


State 40

    5 expr: . '+' expr
    6     | . '-' expr
    6     | '-' . expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 54
    func_call  go to state 43


State 41

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   22     | '(' . expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 55
    func_call  go to state 43


State 42

    4 const: KW_CONST IDENTIFIER '=' expr . ':' data_type ';'
    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr

    KW_AND     shift, and go to state 56
    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69
    ':'        shift, and go to state 70


State 43

   23 expr: func_call .

    $default  reduce using rule 23 (expr)


State 44

   47 parameters: IDENTIFIER . ':' data_type
   48           | IDENTIFIER . '[' ']' ':' data_type
   49           | IDENTIFIER . ':' data_type ',' parameters
   50           | IDENTIFIER . '[' ']' ':' data_type ',' parameters

    ':'  shift, and go to state 71
    '['  shift, and go to state 72


State 45

   39 func_decl: KW_DEF IDENTIFIER '(' parameters . ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   40          | KW_DEF IDENTIFIER '(' parameters . ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   41          | KW_DEF IDENTIFIER '(' parameters . ')' ':' func_body KW_ENDDEF ';'

    ')'  shift, and go to state 73


State 46

   51 main_func: KW_DEF KW_MAIN '(' ')' . ':' func_body KW_ENDDEF ';'

    ':'  shift, and go to state 74


State 47

   31 var: ident ':' data_type ';' .

    $default  reduce using rule 31 (var)


State 48

   32 var: IDENTIFIER '[' POSINT ']' ':' . data_type ';'
   79 data_type: . KW_BOOL
   80          | . KW_INT
   81          | . KW_SCALAR
   82          | . KW_STRING

    KW_INT     shift, and go to state 25
    KW_SCALAR  shift, and go to state 26
    KW_STRING  shift, and go to state 27
    KW_BOOL    shift, and go to state 28

    data_type  go to state 75


State 49

   33 var: IDENTIFIER '[' ']' ':' data_type . ';'

    ';'  shift, and go to state 76


State 50

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'
   42          | IDENTIFIER '(' . func_input ')'
   43 func_input: . %empty  [')']
   44           | . expr
   45           | . expr ',' func_input

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    $default  reduce using rule 43 (func_input)

    expr        go to state 77
    func_call   go to state 43
    func_input  go to state 78


State 51

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   27     | IDENTIFIER '[' . expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 79
    func_call  go to state 43


State 52

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   19     | KW_NOT expr .  [']', ',', ':', ';', ')']
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr

    KW_AND     shift, and go to state 56
    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69

    $default  reduce using rule 19 (expr)

    Conflict between rule 19 and token KW_AND resolved as shift (KW_NOT < KW_AND).
    Conflict between rule 19 and token KW_OR resolved as shift (KW_NOT < KW_OR).
    Conflict between rule 19 and token OP_POWER resolved as shift (KW_NOT < OP_POWER).
    Conflict between rule 19 and token OP_EQUALS resolved as shift (KW_NOT < OP_EQUALS).
    Conflict between rule 19 and token OP_NOT_EQ resolved as shift (KW_NOT < OP_NOT_EQ).
    Conflict between rule 19 and token OP_LS resolved as shift (KW_NOT < OP_LS).
    Conflict between rule 19 and token OP_LS_EQ resolved as shift (KW_NOT < OP_LS_EQ).
    Conflict between rule 19 and token OP_GRT resolved as shift (KW_NOT < OP_GRT).
    Conflict between rule 19 and token OP_GRT_EQ resolved as shift (KW_NOT < OP_GRT_EQ).
    Conflict between rule 19 and token '+' resolved as shift (KW_NOT < '+').
    Conflict between rule 19 and token '-' resolved as shift (KW_NOT < '-').
    Conflict between rule 19 and token '*' resolved as shift (KW_NOT < '*').
    Conflict between rule 19 and token '/' resolved as shift (KW_NOT < '/').
    Conflict between rule 19 and token '%' resolved as shift (KW_NOT < '%').


State 53

    5 expr: '+' expr .  [KW_AND, KW_OR, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '+', '-', '*', '/', '%', ']', ',', ':', ';', ')']
    7     | expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr

    $default  reduce using rule 5 (expr)

    Conflict between rule 5 and token KW_AND resolved as reduce (KW_AND < OP_SIGN).
    Conflict between rule 5 and token KW_OR resolved as reduce (KW_OR < OP_SIGN).
    Conflict between rule 5 and token OP_POWER resolved as reduce (OP_POWER < OP_SIGN).
    Conflict between rule 5 and token OP_EQUALS resolved as reduce (OP_EQUALS < OP_SIGN).
    Conflict between rule 5 and token OP_NOT_EQ resolved as reduce (OP_NOT_EQ < OP_SIGN).
    Conflict between rule 5 and token OP_LS resolved as reduce (OP_LS < OP_SIGN).
    Conflict between rule 5 and token OP_LS_EQ resolved as reduce (OP_LS_EQ < OP_SIGN).
    Conflict between rule 5 and token OP_GRT resolved as reduce (OP_GRT < OP_SIGN).
    Conflict between rule 5 and token OP_GRT_EQ resolved as reduce (OP_GRT_EQ < OP_SIGN).
    Conflict between rule 5 and token '+' resolved as reduce ('+' < OP_SIGN).
    Conflict between rule 5 and token '-' resolved as reduce ('-' < OP_SIGN).
    Conflict between rule 5 and token '*' resolved as reduce ('*' < OP_SIGN).
    Conflict between rule 5 and token '/' resolved as reduce ('/' < OP_SIGN).
    Conflict between rule 5 and token '%' resolved as reduce ('%' < OP_SIGN).


State 54

    6 expr: '-' expr .  [KW_AND, KW_OR, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '+', '-', '*', '/', '%', ']', ',', ':', ';', ')']
    7     | expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr

    $default  reduce using rule 6 (expr)

    Conflict between rule 6 and token KW_AND resolved as reduce (KW_AND < OP_SIGN).
    Conflict between rule 6 and token KW_OR resolved as reduce (KW_OR < OP_SIGN).
    Conflict between rule 6 and token OP_POWER resolved as reduce (OP_POWER < OP_SIGN).
    Conflict between rule 6 and token OP_EQUALS resolved as reduce (OP_EQUALS < OP_SIGN).
    Conflict between rule 6 and token OP_NOT_EQ resolved as reduce (OP_NOT_EQ < OP_SIGN).
    Conflict between rule 6 and token OP_LS resolved as reduce (OP_LS < OP_SIGN).
    Conflict between rule 6 and token OP_LS_EQ resolved as reduce (OP_LS_EQ < OP_SIGN).
    Conflict between rule 6 and token OP_GRT resolved as reduce (OP_GRT < OP_SIGN).
    Conflict between rule 6 and token OP_GRT_EQ resolved as reduce (OP_GRT_EQ < OP_SIGN).
    Conflict between rule 6 and token '+' resolved as reduce ('+' < OP_SIGN).
    Conflict between rule 6 and token '-' resolved as reduce ('-' < OP_SIGN).
    Conflict between rule 6 and token '*' resolved as reduce ('*' < OP_SIGN).
    Conflict between rule 6 and token '/' resolved as reduce ('/' < OP_SIGN).
    Conflict between rule 6 and token '%' resolved as reduce ('%' < OP_SIGN).


State 55

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr
   22     | '(' expr . ')'

    KW_AND     shift, and go to state 56
    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69
    ')'        shift, and go to state 80


State 56

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   20     | expr KW_AND . expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 81
    func_call  go to state 43


State 57

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   21     | expr KW_OR . expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 82
    func_call  go to state 43


State 58

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    7     | expr OP_POWER . expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 83
    func_call  go to state 43


State 59

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   13     | expr OP_EQUALS . expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 84
    func_call  go to state 43


State 60

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   14     | expr OP_NOT_EQ . expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 85
    func_call  go to state 43


State 61

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   15     | expr OP_LS . expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 86
    func_call  go to state 43


State 62

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   17     | expr OP_LS_EQ . expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 87
    func_call  go to state 43


State 63

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   16     | expr OP_GRT . expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 88
    func_call  go to state 43


State 64

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   18     | expr OP_GRT_EQ . expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 89
    func_call  go to state 43


State 65

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    8     | expr '+' . expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 90
    func_call  go to state 43


State 66

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
    9     | expr '-' . expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 91
    func_call  go to state 43


State 67

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   10     | expr '*' . expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 92
    func_call  go to state 43


State 68

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   11     | expr '/' . expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 93
    func_call  go to state 43


State 69

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   12     | expr '%' . expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 94
    func_call  go to state 43


State 70

    4 const: KW_CONST IDENTIFIER '=' expr ':' . data_type ';'
   79 data_type: . KW_BOOL
   80          | . KW_INT
   81          | . KW_SCALAR
   82          | . KW_STRING

    KW_INT     shift, and go to state 25
    KW_SCALAR  shift, and go to state 26
    KW_STRING  shift, and go to state 27
    KW_BOOL    shift, and go to state 28

    data_type  go to state 95


State 71

   47 parameters: IDENTIFIER ':' . data_type
   49           | IDENTIFIER ':' . data_type ',' parameters
   79 data_type: . KW_BOOL
   80          | . KW_INT
   81          | . KW_SCALAR
   82          | . KW_STRING

    KW_INT     shift, and go to state 25
    KW_SCALAR  shift, and go to state 26
    KW_STRING  shift, and go to state 27
    KW_BOOL    shift, and go to state 28

    data_type  go to state 96


State 72

   48 parameters: IDENTIFIER '[' . ']' ':' data_type
   50           | IDENTIFIER '[' . ']' ':' data_type ',' parameters

    ']'  shift, and go to state 97


State 73

   39 func_decl: KW_DEF IDENTIFIER '(' parameters ')' . '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   40          | KW_DEF IDENTIFIER '(' parameters ')' . '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   41          | KW_DEF IDENTIFIER '(' parameters ')' . ':' func_body KW_ENDDEF ';'

    '-'  shift, and go to state 98
    ':'  shift, and go to state 99


State 74

    2 ident: . IDENTIFIER
    3      | . IDENTIFIER ',' ident
    4 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   31 var: . ident ':' data_type ';'
   32    | . IDENTIFIER '[' POSINT ']' ':' data_type ';'
   33    | . IDENTIFIER '[' ']' ':' data_type ';'
   34 func_body: . %empty  [KW_ENDDEF]
   35          | . var func_body
   36          | . const func_body
   37          | . instr func_body
   38          | . if_stmt func_body
   42 func_call: . IDENTIFIER '(' func_input ')'
   51 main_func: KW_DEF KW_MAIN '(' ')' ':' . func_body KW_ENDDEF ';'
   57 instr: . assign_instr ';'
   58      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   60      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   61      | . KW_BREAK ';'
   62      | . KW_CONTINUE ';'
   63      | . KW_RETURN ';'
   64      | . KW_RETURN expr ';'
   65      | . func_call ';'
   66 assign_instr: . IDENTIFIER '=' expr
   67             | . IDENTIFIER '[' expr ']' '=' expr
   68             | . IDENTIFIER OP_ASGN_ADD expr
   69             | . IDENTIFIER OP_ASGN_SUB expr
   70             | . IDENTIFIER OP_ASGN_MUL expr
   71             | . IDENTIFIER OP_ASGN_DIV expr
   72             | . IDENTIFIER OP_ASGN_MOD expr
   77 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
   78        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 100
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 101
    KW_FOR       shift, and go to state 102
    KW_WHILE     shift, and go to state 103
    KW_BREAK     shift, and go to state 104
    KW_CONTINUE  shift, and go to state 105
    KW_RETURN    shift, and go to state 106

    $default  reduce using rule 34 (func_body)

    ident         go to state 7
    const         go to state 107
    var           go to state 108
    func_body     go to state 109
    func_call     go to state 110
    instr         go to state 111
    assign_instr  go to state 112
    if_stmt       go to state 113


State 75

   32 var: IDENTIFIER '[' POSINT ']' ':' data_type . ';'

    ';'  shift, and go to state 114


State 76

   33 var: IDENTIFIER '[' ']' ':' data_type ';' .

    $default  reduce using rule 33 (var)


State 77

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr
   44 func_input: expr .  [')']
   45           | expr . ',' func_input

    KW_AND     shift, and go to state 56
    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69
    ','        shift, and go to state 115

    $default  reduce using rule 44 (func_input)


State 78

   42 func_call: IDENTIFIER '(' func_input . ')'

    ')'  shift, and go to state 116


State 79

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr
   27     | IDENTIFIER '[' expr . ']'

    KW_AND     shift, and go to state 56
    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69
    ']'        shift, and go to state 117


State 80

   22 expr: '(' expr ')' .

    $default  reduce using rule 22 (expr)


State 81

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   20     | expr KW_AND expr .  [KW_AND, ']', ',', ':', ';', ')']
   21     | expr . KW_OR expr

    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69

    $default  reduce using rule 20 (expr)

    Conflict between rule 20 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 20 and token KW_OR resolved as shift (KW_AND < KW_OR).
    Conflict between rule 20 and token OP_POWER resolved as shift (KW_AND < OP_POWER).
    Conflict between rule 20 and token OP_EQUALS resolved as shift (KW_AND < OP_EQUALS).
    Conflict between rule 20 and token OP_NOT_EQ resolved as shift (KW_AND < OP_NOT_EQ).
    Conflict between rule 20 and token OP_LS resolved as shift (KW_AND < OP_LS).
    Conflict between rule 20 and token OP_LS_EQ resolved as shift (KW_AND < OP_LS_EQ).
    Conflict between rule 20 and token OP_GRT resolved as shift (KW_AND < OP_GRT).
    Conflict between rule 20 and token OP_GRT_EQ resolved as shift (KW_AND < OP_GRT_EQ).
    Conflict between rule 20 and token '+' resolved as shift (KW_AND < '+').
    Conflict between rule 20 and token '-' resolved as shift (KW_AND < '-').
    Conflict between rule 20 and token '*' resolved as shift (KW_AND < '*').
    Conflict between rule 20 and token '/' resolved as shift (KW_AND < '/').
    Conflict between rule 20 and token '%' resolved as shift (KW_AND < '%').


State 82

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr
   21     | expr KW_OR expr .  [KW_AND, KW_OR, ']', ',', ':', ';', ')']

    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69

    $default  reduce using rule 21 (expr)

    Conflict between rule 21 and token KW_AND resolved as reduce (KW_AND < KW_OR).
    Conflict between rule 21 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 21 and token OP_POWER resolved as shift (KW_OR < OP_POWER).
    Conflict between rule 21 and token OP_EQUALS resolved as shift (KW_OR < OP_EQUALS).
    Conflict between rule 21 and token OP_NOT_EQ resolved as shift (KW_OR < OP_NOT_EQ).
    Conflict between rule 21 and token OP_LS resolved as shift (KW_OR < OP_LS).
    Conflict between rule 21 and token OP_LS_EQ resolved as shift (KW_OR < OP_LS_EQ).
    Conflict between rule 21 and token OP_GRT resolved as shift (KW_OR < OP_GRT).
    Conflict between rule 21 and token OP_GRT_EQ resolved as shift (KW_OR < OP_GRT_EQ).
    Conflict between rule 21 and token '+' resolved as shift (KW_OR < '+').
    Conflict between rule 21 and token '-' resolved as shift (KW_OR < '-').
    Conflict between rule 21 and token '*' resolved as shift (KW_OR < '*').
    Conflict between rule 21 and token '/' resolved as shift (KW_OR < '/').
    Conflict between rule 21 and token '%' resolved as shift (KW_OR < '%').


State 83

    7 expr: expr . OP_POWER expr
    7     | expr OP_POWER expr .  [KW_AND, KW_OR, ']', ',', ':', ';', ')']
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr

    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69

    $default  reduce using rule 7 (expr)

    Conflict between rule 7 and token KW_AND resolved as reduce (KW_AND < OP_POWER).
    Conflict between rule 7 and token KW_OR resolved as reduce (KW_OR < OP_POWER).
    Conflict between rule 7 and token OP_POWER resolved as shift (%right OP_POWER).
    Conflict between rule 7 and token OP_EQUALS resolved as shift (OP_POWER < OP_EQUALS).
    Conflict between rule 7 and token OP_NOT_EQ resolved as shift (OP_POWER < OP_NOT_EQ).
    Conflict between rule 7 and token OP_LS resolved as shift (OP_POWER < OP_LS).
    Conflict between rule 7 and token OP_LS_EQ resolved as shift (OP_POWER < OP_LS_EQ).
    Conflict between rule 7 and token OP_GRT resolved as shift (OP_POWER < OP_GRT).
    Conflict between rule 7 and token OP_GRT_EQ resolved as shift (OP_POWER < OP_GRT_EQ).
    Conflict between rule 7 and token '+' resolved as shift (OP_POWER < '+').
    Conflict between rule 7 and token '-' resolved as shift (OP_POWER < '-').
    Conflict between rule 7 and token '*' resolved as shift (OP_POWER < '*').
    Conflict between rule 7 and token '/' resolved as shift (OP_POWER < '/').
    Conflict between rule 7 and token '%' resolved as shift (OP_POWER < '%').


State 84

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   13     | expr OP_EQUALS expr .  [KW_AND, KW_OR, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, ']', ',', ':', ';', ')']
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66
    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 13 (expr)

    Conflict between rule 13 and token KW_AND resolved as reduce (KW_AND < OP_EQUALS).
    Conflict between rule 13 and token KW_OR resolved as reduce (KW_OR < OP_EQUALS).
    Conflict between rule 13 and token OP_POWER resolved as reduce (OP_POWER < OP_EQUALS).
    Conflict between rule 13 and token OP_EQUALS resolved as reduce (%left OP_EQUALS).
    Conflict between rule 13 and token OP_NOT_EQ resolved as reduce (%left OP_NOT_EQ).
    Conflict between rule 13 and token OP_LS resolved as reduce (%left OP_LS).
    Conflict between rule 13 and token OP_LS_EQ resolved as reduce (%left OP_LS_EQ).
    Conflict between rule 13 and token OP_GRT resolved as reduce (%left OP_GRT).
    Conflict between rule 13 and token OP_GRT_EQ resolved as reduce (%left OP_GRT_EQ).
    Conflict between rule 13 and token '+' resolved as shift (OP_EQUALS < '+').
    Conflict between rule 13 and token '-' resolved as shift (OP_EQUALS < '-').
    Conflict between rule 13 and token '*' resolved as shift (OP_EQUALS < '*').
    Conflict between rule 13 and token '/' resolved as shift (OP_EQUALS < '/').
    Conflict between rule 13 and token '%' resolved as shift (OP_EQUALS < '%').


State 85

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   14     | expr OP_NOT_EQ expr .  [KW_AND, KW_OR, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, ']', ',', ':', ';', ')']
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66
    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 14 (expr)

    Conflict between rule 14 and token KW_AND resolved as reduce (KW_AND < OP_NOT_EQ).
    Conflict between rule 14 and token KW_OR resolved as reduce (KW_OR < OP_NOT_EQ).
    Conflict between rule 14 and token OP_POWER resolved as reduce (OP_POWER < OP_NOT_EQ).
    Conflict between rule 14 and token OP_EQUALS resolved as reduce (%left OP_EQUALS).
    Conflict between rule 14 and token OP_NOT_EQ resolved as reduce (%left OP_NOT_EQ).
    Conflict between rule 14 and token OP_LS resolved as reduce (%left OP_LS).
    Conflict between rule 14 and token OP_LS_EQ resolved as reduce (%left OP_LS_EQ).
    Conflict between rule 14 and token OP_GRT resolved as reduce (%left OP_GRT).
    Conflict between rule 14 and token OP_GRT_EQ resolved as reduce (%left OP_GRT_EQ).
    Conflict between rule 14 and token '+' resolved as shift (OP_NOT_EQ < '+').
    Conflict between rule 14 and token '-' resolved as shift (OP_NOT_EQ < '-').
    Conflict between rule 14 and token '*' resolved as shift (OP_NOT_EQ < '*').
    Conflict between rule 14 and token '/' resolved as shift (OP_NOT_EQ < '/').
    Conflict between rule 14 and token '%' resolved as shift (OP_NOT_EQ < '%').


State 86

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   15     | expr OP_LS expr .  [KW_AND, KW_OR, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, ']', ',', ':', ';', ')']
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66
    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 15 (expr)

    Conflict between rule 15 and token KW_AND resolved as reduce (KW_AND < OP_LS).
    Conflict between rule 15 and token KW_OR resolved as reduce (KW_OR < OP_LS).
    Conflict between rule 15 and token OP_POWER resolved as reduce (OP_POWER < OP_LS).
    Conflict between rule 15 and token OP_EQUALS resolved as reduce (%left OP_EQUALS).
    Conflict between rule 15 and token OP_NOT_EQ resolved as reduce (%left OP_NOT_EQ).
    Conflict between rule 15 and token OP_LS resolved as reduce (%left OP_LS).
    Conflict between rule 15 and token OP_LS_EQ resolved as reduce (%left OP_LS_EQ).
    Conflict between rule 15 and token OP_GRT resolved as reduce (%left OP_GRT).
    Conflict between rule 15 and token OP_GRT_EQ resolved as reduce (%left OP_GRT_EQ).
    Conflict between rule 15 and token '+' resolved as shift (OP_LS < '+').
    Conflict between rule 15 and token '-' resolved as shift (OP_LS < '-').
    Conflict between rule 15 and token '*' resolved as shift (OP_LS < '*').
    Conflict between rule 15 and token '/' resolved as shift (OP_LS < '/').
    Conflict between rule 15 and token '%' resolved as shift (OP_LS < '%').


State 87

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   17     | expr OP_LS_EQ expr .  [KW_AND, KW_OR, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, ']', ',', ':', ';', ')']
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66
    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 17 (expr)

    Conflict between rule 17 and token KW_AND resolved as reduce (KW_AND < OP_LS_EQ).
    Conflict between rule 17 and token KW_OR resolved as reduce (KW_OR < OP_LS_EQ).
    Conflict between rule 17 and token OP_POWER resolved as reduce (OP_POWER < OP_LS_EQ).
    Conflict between rule 17 and token OP_EQUALS resolved as reduce (%left OP_EQUALS).
    Conflict between rule 17 and token OP_NOT_EQ resolved as reduce (%left OP_NOT_EQ).
    Conflict between rule 17 and token OP_LS resolved as reduce (%left OP_LS).
    Conflict between rule 17 and token OP_LS_EQ resolved as reduce (%left OP_LS_EQ).
    Conflict between rule 17 and token OP_GRT resolved as reduce (%left OP_GRT).
    Conflict between rule 17 and token OP_GRT_EQ resolved as reduce (%left OP_GRT_EQ).
    Conflict between rule 17 and token '+' resolved as shift (OP_LS_EQ < '+').
    Conflict between rule 17 and token '-' resolved as shift (OP_LS_EQ < '-').
    Conflict between rule 17 and token '*' resolved as shift (OP_LS_EQ < '*').
    Conflict between rule 17 and token '/' resolved as shift (OP_LS_EQ < '/').
    Conflict between rule 17 and token '%' resolved as shift (OP_LS_EQ < '%').


State 88

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   16     | expr OP_GRT expr .  [KW_AND, KW_OR, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, ']', ',', ':', ';', ')']
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66
    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 16 (expr)

    Conflict between rule 16 and token KW_AND resolved as reduce (KW_AND < OP_GRT).
    Conflict between rule 16 and token KW_OR resolved as reduce (KW_OR < OP_GRT).
    Conflict between rule 16 and token OP_POWER resolved as reduce (OP_POWER < OP_GRT).
    Conflict between rule 16 and token OP_EQUALS resolved as reduce (%left OP_EQUALS).
    Conflict between rule 16 and token OP_NOT_EQ resolved as reduce (%left OP_NOT_EQ).
    Conflict between rule 16 and token OP_LS resolved as reduce (%left OP_LS).
    Conflict between rule 16 and token OP_LS_EQ resolved as reduce (%left OP_LS_EQ).
    Conflict between rule 16 and token OP_GRT resolved as reduce (%left OP_GRT).
    Conflict between rule 16 and token OP_GRT_EQ resolved as reduce (%left OP_GRT_EQ).
    Conflict between rule 16 and token '+' resolved as shift (OP_GRT < '+').
    Conflict between rule 16 and token '-' resolved as shift (OP_GRT < '-').
    Conflict between rule 16 and token '*' resolved as shift (OP_GRT < '*').
    Conflict between rule 16 and token '/' resolved as shift (OP_GRT < '/').
    Conflict between rule 16 and token '%' resolved as shift (OP_GRT < '%').


State 89

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   18     | expr OP_GRT_EQ expr .  [KW_AND, KW_OR, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, ']', ',', ':', ';', ')']
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66
    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 18 (expr)

    Conflict between rule 18 and token KW_AND resolved as reduce (KW_AND < OP_GRT_EQ).
    Conflict between rule 18 and token KW_OR resolved as reduce (KW_OR < OP_GRT_EQ).
    Conflict between rule 18 and token OP_POWER resolved as reduce (OP_POWER < OP_GRT_EQ).
    Conflict between rule 18 and token OP_EQUALS resolved as reduce (%left OP_EQUALS).
    Conflict between rule 18 and token OP_NOT_EQ resolved as reduce (%left OP_NOT_EQ).
    Conflict between rule 18 and token OP_LS resolved as reduce (%left OP_LS).
    Conflict between rule 18 and token OP_LS_EQ resolved as reduce (%left OP_LS_EQ).
    Conflict between rule 18 and token OP_GRT resolved as reduce (%left OP_GRT).
    Conflict between rule 18 and token OP_GRT_EQ resolved as reduce (%left OP_GRT_EQ).
    Conflict between rule 18 and token '+' resolved as shift (OP_GRT_EQ < '+').
    Conflict between rule 18 and token '-' resolved as shift (OP_GRT_EQ < '-').
    Conflict between rule 18 and token '*' resolved as shift (OP_GRT_EQ < '*').
    Conflict between rule 18 and token '/' resolved as shift (OP_GRT_EQ < '/').
    Conflict between rule 18 and token '%' resolved as shift (OP_GRT_EQ < '%').


State 90

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    8     | expr '+' expr .  [KW_AND, KW_OR, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '+', '-', ']', ',', ':', ';', ')']
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr

    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 8 (expr)

    Conflict between rule 8 and token KW_AND resolved as reduce (KW_AND < '+').
    Conflict between rule 8 and token KW_OR resolved as reduce (KW_OR < '+').
    Conflict between rule 8 and token OP_POWER resolved as reduce (OP_POWER < '+').
    Conflict between rule 8 and token OP_EQUALS resolved as reduce (OP_EQUALS < '+').
    Conflict between rule 8 and token OP_NOT_EQ resolved as reduce (OP_NOT_EQ < '+').
    Conflict between rule 8 and token OP_LS resolved as reduce (OP_LS < '+').
    Conflict between rule 8 and token OP_LS_EQ resolved as reduce (OP_LS_EQ < '+').
    Conflict between rule 8 and token OP_GRT resolved as reduce (OP_GRT < '+').
    Conflict between rule 8 and token OP_GRT_EQ resolved as reduce (OP_GRT_EQ < '+').
    Conflict between rule 8 and token '+' resolved as reduce (%left '+').
    Conflict between rule 8 and token '-' resolved as reduce (%left '-').
    Conflict between rule 8 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 8 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 8 and token '%' resolved as shift ('+' < '%').


State 91

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
    9     | expr '-' expr .  [KW_AND, KW_OR, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '+', '-', ']', ',', ':', ';', ')']
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr

    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 9 (expr)

    Conflict between rule 9 and token KW_AND resolved as reduce (KW_AND < '-').
    Conflict between rule 9 and token KW_OR resolved as reduce (KW_OR < '-').
    Conflict between rule 9 and token OP_POWER resolved as reduce (OP_POWER < '-').
    Conflict between rule 9 and token OP_EQUALS resolved as reduce (OP_EQUALS < '-').
    Conflict between rule 9 and token OP_NOT_EQ resolved as reduce (OP_NOT_EQ < '-').
    Conflict between rule 9 and token OP_LS resolved as reduce (OP_LS < '-').
    Conflict between rule 9 and token OP_LS_EQ resolved as reduce (OP_LS_EQ < '-').
    Conflict between rule 9 and token OP_GRT resolved as reduce (OP_GRT < '-').
    Conflict between rule 9 and token OP_GRT_EQ resolved as reduce (OP_GRT_EQ < '-').
    Conflict between rule 9 and token '+' resolved as reduce (%left '+').
    Conflict between rule 9 and token '-' resolved as reduce (%left '-').
    Conflict between rule 9 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 9 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 9 and token '%' resolved as shift ('-' < '%').


State 92

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   10     | expr '*' expr .  [KW_AND, KW_OR, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '+', '-', '*', '/', '%', ']', ',', ':', ';', ')']
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr

    $default  reduce using rule 10 (expr)

    Conflict between rule 10 and token KW_AND resolved as reduce (KW_AND < '*').
    Conflict between rule 10 and token KW_OR resolved as reduce (KW_OR < '*').
    Conflict between rule 10 and token OP_POWER resolved as reduce (OP_POWER < '*').
    Conflict between rule 10 and token OP_EQUALS resolved as reduce (OP_EQUALS < '*').
    Conflict between rule 10 and token OP_NOT_EQ resolved as reduce (OP_NOT_EQ < '*').
    Conflict between rule 10 and token OP_LS resolved as reduce (OP_LS < '*').
    Conflict between rule 10 and token OP_LS_EQ resolved as reduce (OP_LS_EQ < '*').
    Conflict between rule 10 and token OP_GRT resolved as reduce (OP_GRT < '*').
    Conflict between rule 10 and token OP_GRT_EQ resolved as reduce (OP_GRT_EQ < '*').
    Conflict between rule 10 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 10 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 10 and token '*' resolved as reduce (%left '*').
    Conflict between rule 10 and token '/' resolved as reduce (%left '/').
    Conflict between rule 10 and token '%' resolved as reduce (%left '%').


State 93

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   11     | expr '/' expr .  [KW_AND, KW_OR, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '+', '-', '*', '/', '%', ']', ',', ':', ';', ')']
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr

    $default  reduce using rule 11 (expr)

    Conflict between rule 11 and token KW_AND resolved as reduce (KW_AND < '/').
    Conflict between rule 11 and token KW_OR resolved as reduce (KW_OR < '/').
    Conflict between rule 11 and token OP_POWER resolved as reduce (OP_POWER < '/').
    Conflict between rule 11 and token OP_EQUALS resolved as reduce (OP_EQUALS < '/').
    Conflict between rule 11 and token OP_NOT_EQ resolved as reduce (OP_NOT_EQ < '/').
    Conflict between rule 11 and token OP_LS resolved as reduce (OP_LS < '/').
    Conflict between rule 11 and token OP_LS_EQ resolved as reduce (OP_LS_EQ < '/').
    Conflict between rule 11 and token OP_GRT resolved as reduce (OP_GRT < '/').
    Conflict between rule 11 and token OP_GRT_EQ resolved as reduce (OP_GRT_EQ < '/').
    Conflict between rule 11 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 11 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 11 and token '*' resolved as reduce (%left '*').
    Conflict between rule 11 and token '/' resolved as reduce (%left '/').
    Conflict between rule 11 and token '%' resolved as reduce (%left '%').


State 94

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   12     | expr '%' expr .  [KW_AND, KW_OR, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '+', '-', '*', '/', '%', ']', ',', ':', ';', ')']
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr

    $default  reduce using rule 12 (expr)

    Conflict between rule 12 and token KW_AND resolved as reduce (KW_AND < '%').
    Conflict between rule 12 and token KW_OR resolved as reduce (KW_OR < '%').
    Conflict between rule 12 and token OP_POWER resolved as reduce (OP_POWER < '%').
    Conflict between rule 12 and token OP_EQUALS resolved as reduce (OP_EQUALS < '%').
    Conflict between rule 12 and token OP_NOT_EQ resolved as reduce (OP_NOT_EQ < '%').
    Conflict between rule 12 and token OP_LS resolved as reduce (OP_LS < '%').
    Conflict between rule 12 and token OP_LS_EQ resolved as reduce (OP_LS_EQ < '%').
    Conflict between rule 12 and token OP_GRT resolved as reduce (OP_GRT < '%').
    Conflict between rule 12 and token OP_GRT_EQ resolved as reduce (OP_GRT_EQ < '%').
    Conflict between rule 12 and token '+' resolved as reduce ('+' < '%').
    Conflict between rule 12 and token '-' resolved as reduce ('-' < '%').
    Conflict between rule 12 and token '*' resolved as reduce (%left '*').
    Conflict between rule 12 and token '/' resolved as reduce (%left '/').
    Conflict between rule 12 and token '%' resolved as reduce (%left '%').


State 95

    4 const: KW_CONST IDENTIFIER '=' expr ':' data_type . ';'

    ';'  shift, and go to state 118


State 96

   47 parameters: IDENTIFIER ':' data_type .  [')']
   49           | IDENTIFIER ':' data_type . ',' parameters

    ','  shift, and go to state 119

    $default  reduce using rule 47 (parameters)


State 97

   48 parameters: IDENTIFIER '[' ']' . ':' data_type
   50           | IDENTIFIER '[' ']' . ':' data_type ',' parameters

    ':'  shift, and go to state 120


State 98

   39 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' . OP_GRT data_type ':' func_body KW_ENDDEF ';'
   40          | KW_DEF IDENTIFIER '(' parameters ')' '-' . OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'

    OP_GRT  shift, and go to state 121


State 99

    2 ident: . IDENTIFIER
    3      | . IDENTIFIER ',' ident
    4 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   31 var: . ident ':' data_type ';'
   32    | . IDENTIFIER '[' POSINT ']' ':' data_type ';'
   33    | . IDENTIFIER '[' ']' ':' data_type ';'
   34 func_body: . %empty  [KW_ENDDEF]
   35          | . var func_body
   36          | . const func_body
   37          | . instr func_body
   38          | . if_stmt func_body
   41 func_decl: KW_DEF IDENTIFIER '(' parameters ')' ':' . func_body KW_ENDDEF ';'
   42 func_call: . IDENTIFIER '(' func_input ')'
   57 instr: . assign_instr ';'
   58      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   60      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   61      | . KW_BREAK ';'
   62      | . KW_CONTINUE ';'
   63      | . KW_RETURN ';'
   64      | . KW_RETURN expr ';'
   65      | . func_call ';'
   66 assign_instr: . IDENTIFIER '=' expr
   67             | . IDENTIFIER '[' expr ']' '=' expr
   68             | . IDENTIFIER OP_ASGN_ADD expr
   69             | . IDENTIFIER OP_ASGN_SUB expr
   70             | . IDENTIFIER OP_ASGN_MUL expr
   71             | . IDENTIFIER OP_ASGN_DIV expr
   72             | . IDENTIFIER OP_ASGN_MOD expr
   77 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
   78        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 100
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 101
    KW_FOR       shift, and go to state 102
    KW_WHILE     shift, and go to state 103
    KW_BREAK     shift, and go to state 104
    KW_CONTINUE  shift, and go to state 105
    KW_RETURN    shift, and go to state 106

    $default  reduce using rule 34 (func_body)

    ident         go to state 7
    const         go to state 107
    var           go to state 108
    func_body     go to state 122
    func_call     go to state 110
    instr         go to state 111
    assign_instr  go to state 112
    if_stmt       go to state 113


State 100

    2 ident: IDENTIFIER .  [':']
    3      | IDENTIFIER . ',' ident
   32 var: IDENTIFIER . '[' POSINT ']' ':' data_type ';'
   33    | IDENTIFIER . '[' ']' ':' data_type ';'
   42 func_call: IDENTIFIER . '(' func_input ')'
   66 assign_instr: IDENTIFIER . '=' expr
   67             | IDENTIFIER . '[' expr ']' '=' expr
   68             | IDENTIFIER . OP_ASGN_ADD expr
   69             | IDENTIFIER . OP_ASGN_SUB expr
   70             | IDENTIFIER . OP_ASGN_MUL expr
   71             | IDENTIFIER . OP_ASGN_DIV expr
   72             | IDENTIFIER . OP_ASGN_MOD expr

    OP_ASGN_ADD  shift, and go to state 123
    OP_ASGN_SUB  shift, and go to state 124
    OP_ASGN_MUL  shift, and go to state 125
    OP_ASGN_DIV  shift, and go to state 126
    OP_ASGN_MOD  shift, and go to state 127
    '='          shift, and go to state 128
    ','          shift, and go to state 12
    '('          shift, and go to state 50
    '['          shift, and go to state 129

    $default  reduce using rule 2 (ident)


State 101

   77 if_stmt: KW_IF . '(' expr ')' ':' stmts KW_ENDIF ';'
   78        | KW_IF . '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    '('  shift, and go to state 130


State 102

   58 instr: KW_FOR . IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | KW_FOR . IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 131


State 103

   60 instr: KW_WHILE . '(' expr ')' ':' stmts KW_ENDWHILE ';'

    '('  shift, and go to state 132


State 104

   61 instr: KW_BREAK . ';'

    ';'  shift, and go to state 133


State 105

   62 instr: KW_CONTINUE . ';'

    ';'  shift, and go to state 134


State 106

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'
   63 instr: KW_RETURN . ';'
   64      | KW_RETURN . expr ';'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    ';'         shift, and go to state 135
    '('         shift, and go to state 41

    expr       go to state 136
    func_call  go to state 43


State 107

    2 ident: . IDENTIFIER
    3      | . IDENTIFIER ',' ident
    4 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   31 var: . ident ':' data_type ';'
   32    | . IDENTIFIER '[' POSINT ']' ':' data_type ';'
   33    | . IDENTIFIER '[' ']' ':' data_type ';'
   34 func_body: . %empty  [KW_ENDDEF]
   35          | . var func_body
   36          | . const func_body
   36          | const . func_body
   37          | . instr func_body
   38          | . if_stmt func_body
   42 func_call: . IDENTIFIER '(' func_input ')'
   57 instr: . assign_instr ';'
   58      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   60      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   61      | . KW_BREAK ';'
   62      | . KW_CONTINUE ';'
   63      | . KW_RETURN ';'
   64      | . KW_RETURN expr ';'
   65      | . func_call ';'
   66 assign_instr: . IDENTIFIER '=' expr
   67             | . IDENTIFIER '[' expr ']' '=' expr
   68             | . IDENTIFIER OP_ASGN_ADD expr
   69             | . IDENTIFIER OP_ASGN_SUB expr
   70             | . IDENTIFIER OP_ASGN_MUL expr
   71             | . IDENTIFIER OP_ASGN_DIV expr
   72             | . IDENTIFIER OP_ASGN_MOD expr
   77 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
   78        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 100
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 101
    KW_FOR       shift, and go to state 102
    KW_WHILE     shift, and go to state 103
    KW_BREAK     shift, and go to state 104
    KW_CONTINUE  shift, and go to state 105
    KW_RETURN    shift, and go to state 106

    $default  reduce using rule 34 (func_body)

    ident         go to state 7
    const         go to state 107
    var           go to state 108
    func_body     go to state 137
    func_call     go to state 110
    instr         go to state 111
    assign_instr  go to state 112
    if_stmt       go to state 113


State 108

    2 ident: . IDENTIFIER
    3      | . IDENTIFIER ',' ident
    4 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   31 var: . ident ':' data_type ';'
   32    | . IDENTIFIER '[' POSINT ']' ':' data_type ';'
   33    | . IDENTIFIER '[' ']' ':' data_type ';'
   34 func_body: . %empty  [KW_ENDDEF]
   35          | . var func_body
   35          | var . func_body
   36          | . const func_body
   37          | . instr func_body
   38          | . if_stmt func_body
   42 func_call: . IDENTIFIER '(' func_input ')'
   57 instr: . assign_instr ';'
   58      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   60      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   61      | . KW_BREAK ';'
   62      | . KW_CONTINUE ';'
   63      | . KW_RETURN ';'
   64      | . KW_RETURN expr ';'
   65      | . func_call ';'
   66 assign_instr: . IDENTIFIER '=' expr
   67             | . IDENTIFIER '[' expr ']' '=' expr
   68             | . IDENTIFIER OP_ASGN_ADD expr
   69             | . IDENTIFIER OP_ASGN_SUB expr
   70             | . IDENTIFIER OP_ASGN_MUL expr
   71             | . IDENTIFIER OP_ASGN_DIV expr
   72             | . IDENTIFIER OP_ASGN_MOD expr
   77 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
   78        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 100
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 101
    KW_FOR       shift, and go to state 102
    KW_WHILE     shift, and go to state 103
    KW_BREAK     shift, and go to state 104
    KW_CONTINUE  shift, and go to state 105
    KW_RETURN    shift, and go to state 106

    $default  reduce using rule 34 (func_body)

    ident         go to state 7
    const         go to state 107
    var           go to state 108
    func_body     go to state 138
    func_call     go to state 110
    instr         go to state 111
    assign_instr  go to state 112
    if_stmt       go to state 113


State 109

   51 main_func: KW_DEF KW_MAIN '(' ')' ':' func_body . KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 139


State 110

   65 instr: func_call . ';'

    ';'  shift, and go to state 140


State 111

    2 ident: . IDENTIFIER
    3      | . IDENTIFIER ',' ident
    4 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   31 var: . ident ':' data_type ';'
   32    | . IDENTIFIER '[' POSINT ']' ':' data_type ';'
   33    | . IDENTIFIER '[' ']' ':' data_type ';'
   34 func_body: . %empty  [KW_ENDDEF]
   35          | . var func_body
   36          | . const func_body
   37          | . instr func_body
   37          | instr . func_body
   38          | . if_stmt func_body
   42 func_call: . IDENTIFIER '(' func_input ')'
   57 instr: . assign_instr ';'
   58      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   60      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   61      | . KW_BREAK ';'
   62      | . KW_CONTINUE ';'
   63      | . KW_RETURN ';'
   64      | . KW_RETURN expr ';'
   65      | . func_call ';'
   66 assign_instr: . IDENTIFIER '=' expr
   67             | . IDENTIFIER '[' expr ']' '=' expr
   68             | . IDENTIFIER OP_ASGN_ADD expr
   69             | . IDENTIFIER OP_ASGN_SUB expr
   70             | . IDENTIFIER OP_ASGN_MUL expr
   71             | . IDENTIFIER OP_ASGN_DIV expr
   72             | . IDENTIFIER OP_ASGN_MOD expr
   77 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
   78        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 100
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 101
    KW_FOR       shift, and go to state 102
    KW_WHILE     shift, and go to state 103
    KW_BREAK     shift, and go to state 104
    KW_CONTINUE  shift, and go to state 105
    KW_RETURN    shift, and go to state 106

    $default  reduce using rule 34 (func_body)

    ident         go to state 7
    const         go to state 107
    var           go to state 108
    func_body     go to state 141
    func_call     go to state 110
    instr         go to state 111
    assign_instr  go to state 112
    if_stmt       go to state 113


State 112

   57 instr: assign_instr . ';'

    ';'  shift, and go to state 142


State 113

    2 ident: . IDENTIFIER
    3      | . IDENTIFIER ',' ident
    4 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   31 var: . ident ':' data_type ';'
   32    | . IDENTIFIER '[' POSINT ']' ':' data_type ';'
   33    | . IDENTIFIER '[' ']' ':' data_type ';'
   34 func_body: . %empty  [KW_ENDDEF]
   35          | . var func_body
   36          | . const func_body
   37          | . instr func_body
   38          | . if_stmt func_body
   38          | if_stmt . func_body
   42 func_call: . IDENTIFIER '(' func_input ')'
   57 instr: . assign_instr ';'
   58      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   60      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   61      | . KW_BREAK ';'
   62      | . KW_CONTINUE ';'
   63      | . KW_RETURN ';'
   64      | . KW_RETURN expr ';'
   65      | . func_call ';'
   66 assign_instr: . IDENTIFIER '=' expr
   67             | . IDENTIFIER '[' expr ']' '=' expr
   68             | . IDENTIFIER OP_ASGN_ADD expr
   69             | . IDENTIFIER OP_ASGN_SUB expr
   70             | . IDENTIFIER OP_ASGN_MUL expr
   71             | . IDENTIFIER OP_ASGN_DIV expr
   72             | . IDENTIFIER OP_ASGN_MOD expr
   77 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
   78        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 100
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 101
    KW_FOR       shift, and go to state 102
    KW_WHILE     shift, and go to state 103
    KW_BREAK     shift, and go to state 104
    KW_CONTINUE  shift, and go to state 105
    KW_RETURN    shift, and go to state 106

    $default  reduce using rule 34 (func_body)

    ident         go to state 7
    const         go to state 107
    var           go to state 108
    func_body     go to state 143
    func_call     go to state 110
    instr         go to state 111
    assign_instr  go to state 112
    if_stmt       go to state 113


State 114

   32 var: IDENTIFIER '[' POSINT ']' ':' data_type ';' .

    $default  reduce using rule 32 (var)


State 115

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'
   43 func_input: . %empty  [')']
   44           | . expr
   45           | . expr ',' func_input
   45           | expr ',' . func_input

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    $default  reduce using rule 43 (func_input)

    expr        go to state 77
    func_call   go to state 43
    func_input  go to state 144


State 116

   42 func_call: IDENTIFIER '(' func_input ')' .

    $default  reduce using rule 42 (func_call)


State 117

   27 expr: IDENTIFIER '[' expr ']' .

    $default  reduce using rule 27 (expr)


State 118

    4 const: KW_CONST IDENTIFIER '=' expr ':' data_type ';' .

    $default  reduce using rule 4 (const)


State 119

   46 parameters: . %empty  [')']
   47           | . IDENTIFIER ':' data_type
   48           | . IDENTIFIER '[' ']' ':' data_type
   49           | . IDENTIFIER ':' data_type ',' parameters
   49           | IDENTIFIER ':' data_type ',' . parameters
   50           | . IDENTIFIER '[' ']' ':' data_type ',' parameters

    IDENTIFIER  shift, and go to state 44

    $default  reduce using rule 46 (parameters)

    parameters  go to state 145


State 120

   48 parameters: IDENTIFIER '[' ']' ':' . data_type
   50           | IDENTIFIER '[' ']' ':' . data_type ',' parameters
   79 data_type: . KW_BOOL
   80          | . KW_INT
   81          | . KW_SCALAR
   82          | . KW_STRING

    KW_INT     shift, and go to state 25
    KW_SCALAR  shift, and go to state 26
    KW_STRING  shift, and go to state 27
    KW_BOOL    shift, and go to state 28

    data_type  go to state 146


State 121

   39 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT . data_type ':' func_body KW_ENDDEF ';'
   40          | KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT . '[' ']' data_type ':' func_body KW_ENDDEF ';'
   79 data_type: . KW_BOOL
   80          | . KW_INT
   81          | . KW_SCALAR
   82          | . KW_STRING

    KW_INT     shift, and go to state 25
    KW_SCALAR  shift, and go to state 26
    KW_STRING  shift, and go to state 27
    KW_BOOL    shift, and go to state 28
    '['        shift, and go to state 147

    data_type  go to state 148


State 122

   41 func_decl: KW_DEF IDENTIFIER '(' parameters ')' ':' func_body . KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 149


State 123

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'
   68 assign_instr: IDENTIFIER OP_ASGN_ADD . expr

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 150
    func_call  go to state 43


State 124

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'
   69 assign_instr: IDENTIFIER OP_ASGN_SUB . expr

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 151
    func_call  go to state 43


State 125

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'
   70 assign_instr: IDENTIFIER OP_ASGN_MUL . expr

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 152
    func_call  go to state 43


State 126

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'
   71 assign_instr: IDENTIFIER OP_ASGN_DIV . expr

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 153
    func_call  go to state 43


State 127

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'
   72 assign_instr: IDENTIFIER OP_ASGN_MOD . expr

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 154
    func_call  go to state 43


State 128

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'
   66 assign_instr: IDENTIFIER '=' . expr

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 155
    func_call  go to state 43


State 129

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   32 var: IDENTIFIER '[' . POSINT ']' ':' data_type ';'
   33    | IDENTIFIER '[' . ']' ':' data_type ';'
   42 func_call: . IDENTIFIER '(' func_input ')'
   67 assign_instr: IDENTIFIER '[' . expr ']' '=' expr

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 156
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    ']'         shift, and go to state 21
    '('         shift, and go to state 41

    expr       go to state 157
    func_call  go to state 43


State 130

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'
   77 if_stmt: KW_IF '(' . expr ')' ':' stmts KW_ENDIF ';'
   78        | KW_IF '(' . expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 158
    func_call  go to state 43


State 131

   58 instr: KW_FOR IDENTIFIER . KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | KW_FOR IDENTIFIER . KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'

    KW_IN  shift, and go to state 159


State 132

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'
   60 instr: KW_WHILE '(' . expr ')' ':' stmts KW_ENDWHILE ';'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 160
    func_call  go to state 43


State 133

   61 instr: KW_BREAK ';' .

    $default  reduce using rule 61 (instr)


State 134

   62 instr: KW_CONTINUE ';' .

    $default  reduce using rule 62 (instr)


State 135

   63 instr: KW_RETURN ';' .

    $default  reduce using rule 63 (instr)


State 136

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr
   64 instr: KW_RETURN expr . ';'

    KW_AND     shift, and go to state 56
    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69
    ';'        shift, and go to state 161


State 137

   36 func_body: const func_body .

    $default  reduce using rule 36 (func_body)


State 138

   35 func_body: var func_body .

    $default  reduce using rule 35 (func_body)


State 139

   51 main_func: KW_DEF KW_MAIN '(' ')' ':' func_body KW_ENDDEF . ';'

    ';'  shift, and go to state 162


State 140

   65 instr: func_call ';' .

    $default  reduce using rule 65 (instr)


State 141

   37 func_body: instr func_body .

    $default  reduce using rule 37 (func_body)


State 142

   57 instr: assign_instr ';' .

    $default  reduce using rule 57 (instr)


State 143

   38 func_body: if_stmt func_body .

    $default  reduce using rule 38 (func_body)


State 144

   45 func_input: expr ',' func_input .

    $default  reduce using rule 45 (func_input)


State 145

   49 parameters: IDENTIFIER ':' data_type ',' parameters .

    $default  reduce using rule 49 (parameters)


State 146

   48 parameters: IDENTIFIER '[' ']' ':' data_type .  [')']
   50           | IDENTIFIER '[' ']' ':' data_type . ',' parameters

    ','  shift, and go to state 163

    $default  reduce using rule 48 (parameters)


State 147

   40 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' . ']' data_type ':' func_body KW_ENDDEF ';'

    ']'  shift, and go to state 164


State 148

   39 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type . ':' func_body KW_ENDDEF ';'

    ':'  shift, and go to state 165


State 149

   41 func_decl: KW_DEF IDENTIFIER '(' parameters ')' ':' func_body KW_ENDDEF . ';'

    ';'  shift, and go to state 166


State 150

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr
   68 assign_instr: IDENTIFIER OP_ASGN_ADD expr .  [';']

    KW_AND     shift, and go to state 56
    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69

    $default  reduce using rule 68 (assign_instr)


State 151

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr
   69 assign_instr: IDENTIFIER OP_ASGN_SUB expr .  [';']

    KW_AND     shift, and go to state 56
    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69

    $default  reduce using rule 69 (assign_instr)


State 152

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr
   70 assign_instr: IDENTIFIER OP_ASGN_MUL expr .  [';']

    KW_AND     shift, and go to state 56
    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69

    $default  reduce using rule 70 (assign_instr)


State 153

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr
   71 assign_instr: IDENTIFIER OP_ASGN_DIV expr .  [';']

    KW_AND     shift, and go to state 56
    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69

    $default  reduce using rule 71 (assign_instr)


State 154

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr
   72 assign_instr: IDENTIFIER OP_ASGN_MOD expr .  [';']

    KW_AND     shift, and go to state 56
    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69

    $default  reduce using rule 72 (assign_instr)


State 155

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr
   66 assign_instr: IDENTIFIER '=' expr .  [';']

    KW_AND     shift, and go to state 56
    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69

    $default  reduce using rule 66 (assign_instr)


State 156

   30 expr: POSINT .  [KW_AND, KW_OR, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '+', '-', '*', '/', '%']
   32 var: IDENTIFIER '[' POSINT . ']' ':' data_type ';'

    ']'  shift, and go to state 30

    $default  reduce using rule 30 (expr)

    Conflict between rule 30 and token ']' resolved as shift (%right ']').


State 157

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr
   67 assign_instr: IDENTIFIER '[' expr . ']' '=' expr

    KW_AND     shift, and go to state 56
    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69
    ']'        shift, and go to state 167


State 158

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr
   77 if_stmt: KW_IF '(' expr . ')' ':' stmts KW_ENDIF ';'
   78        | KW_IF '(' expr . ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    KW_AND     shift, and go to state 56
    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69
    ')'        shift, and go to state 168


State 159

   58 instr: KW_FOR IDENTIFIER KW_IN . '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | KW_FOR IDENTIFIER KW_IN . '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'

    '['  shift, and go to state 169


State 160

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr
   60 instr: KW_WHILE '(' expr . ')' ':' stmts KW_ENDWHILE ';'

    KW_AND     shift, and go to state 56
    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69
    ')'        shift, and go to state 170


State 161

   64 instr: KW_RETURN expr ';' .

    $default  reduce using rule 64 (instr)


State 162

   51 main_func: KW_DEF KW_MAIN '(' ')' ':' func_body KW_ENDDEF ';' .

    $default  reduce using rule 51 (main_func)


State 163

   46 parameters: . %empty  [')']
   47           | . IDENTIFIER ':' data_type
   48           | . IDENTIFIER '[' ']' ':' data_type
   49           | . IDENTIFIER ':' data_type ',' parameters
   50           | . IDENTIFIER '[' ']' ':' data_type ',' parameters
   50           | IDENTIFIER '[' ']' ':' data_type ',' . parameters

    IDENTIFIER  shift, and go to state 44

    $default  reduce using rule 46 (parameters)

    parameters  go to state 171


State 164

   40 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' . data_type ':' func_body KW_ENDDEF ';'
   79 data_type: . KW_BOOL
   80          | . KW_INT
   81          | . KW_SCALAR
   82          | . KW_STRING

    KW_INT     shift, and go to state 25
    KW_SCALAR  shift, and go to state 26
    KW_STRING  shift, and go to state 27
    KW_BOOL    shift, and go to state 28

    data_type  go to state 172


State 165

    2 ident: . IDENTIFIER
    3      | . IDENTIFIER ',' ident
    4 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   31 var: . ident ':' data_type ';'
   32    | . IDENTIFIER '[' POSINT ']' ':' data_type ';'
   33    | . IDENTIFIER '[' ']' ':' data_type ';'
   34 func_body: . %empty  [KW_ENDDEF]
   35          | . var func_body
   36          | . const func_body
   37          | . instr func_body
   38          | . if_stmt func_body
   39 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' . func_body KW_ENDDEF ';'
   42 func_call: . IDENTIFIER '(' func_input ')'
   57 instr: . assign_instr ';'
   58      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   60      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   61      | . KW_BREAK ';'
   62      | . KW_CONTINUE ';'
   63      | . KW_RETURN ';'
   64      | . KW_RETURN expr ';'
   65      | . func_call ';'
   66 assign_instr: . IDENTIFIER '=' expr
   67             | . IDENTIFIER '[' expr ']' '=' expr
   68             | . IDENTIFIER OP_ASGN_ADD expr
   69             | . IDENTIFIER OP_ASGN_SUB expr
   70             | . IDENTIFIER OP_ASGN_MUL expr
   71             | . IDENTIFIER OP_ASGN_DIV expr
   72             | . IDENTIFIER OP_ASGN_MOD expr
   77 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
   78        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 100
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 101
    KW_FOR       shift, and go to state 102
    KW_WHILE     shift, and go to state 103
    KW_BREAK     shift, and go to state 104
    KW_CONTINUE  shift, and go to state 105
    KW_RETURN    shift, and go to state 106

    $default  reduce using rule 34 (func_body)

    ident         go to state 7
    const         go to state 107
    var           go to state 108
    func_body     go to state 173
    func_call     go to state 110
    instr         go to state 111
    assign_instr  go to state 112
    if_stmt       go to state 113


State 166

   41 func_decl: KW_DEF IDENTIFIER '(' parameters ')' ':' func_body KW_ENDDEF ';' .

    $default  reduce using rule 41 (func_decl)


State 167

   67 assign_instr: IDENTIFIER '[' expr ']' . '=' expr

    '='  shift, and go to state 174


State 168

   77 if_stmt: KW_IF '(' expr ')' . ':' stmts KW_ENDIF ';'
   78        | KW_IF '(' expr ')' . ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    ':'  shift, and go to state 175


State 169

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'
   58 instr: KW_FOR IDENTIFIER KW_IN '[' . expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | KW_FOR IDENTIFIER KW_IN '[' . expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 176
    func_call  go to state 43


State 170

   60 instr: KW_WHILE '(' expr ')' . ':' stmts KW_ENDWHILE ';'

    ':'  shift, and go to state 177


State 171

   50 parameters: IDENTIFIER '[' ']' ':' data_type ',' parameters .

    $default  reduce using rule 50 (parameters)


State 172

   40 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type . ':' func_body KW_ENDDEF ';'

    ':'  shift, and go to state 178


State 173

   39 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' func_body . KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 179


State 174

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'
   67 assign_instr: IDENTIFIER '[' expr ']' '=' . expr

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 180
    func_call  go to state 43


State 175

   42 func_call: . IDENTIFIER '(' func_input ')'
   57 instr: . assign_instr ';'
   58      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   60      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   61      | . KW_BREAK ';'
   62      | . KW_CONTINUE ';'
   63      | . KW_RETURN ';'
   64      | . KW_RETURN expr ';'
   65      | . func_call ';'
   66 assign_instr: . IDENTIFIER '=' expr
   67             | . IDENTIFIER '[' expr ']' '=' expr
   68             | . IDENTIFIER OP_ASGN_ADD expr
   69             | . IDENTIFIER OP_ASGN_SUB expr
   70             | . IDENTIFIER OP_ASGN_MUL expr
   71             | . IDENTIFIER OP_ASGN_DIV expr
   72             | . IDENTIFIER OP_ASGN_MOD expr
   73 stmts: . instr
   74      | . instr stmts
   75      | . if_stmt
   76      | . if_stmt stmts
   77 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
   77        | KW_IF '(' expr ')' ':' . stmts KW_ENDIF ';'
   78        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'
   78        | KW_IF '(' expr ')' ':' . stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 181
    KW_IF        shift, and go to state 101
    KW_FOR       shift, and go to state 102
    KW_WHILE     shift, and go to state 103
    KW_BREAK     shift, and go to state 104
    KW_CONTINUE  shift, and go to state 105
    KW_RETURN    shift, and go to state 106

    func_call     go to state 110
    instr         go to state 182
    assign_instr  go to state 112
    stmts         go to state 183
    if_stmt       go to state 184


State 176

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr
   58 instr: KW_FOR IDENTIFIER KW_IN '[' expr . ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | KW_FOR IDENTIFIER KW_IN '[' expr . ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'

    KW_AND     shift, and go to state 56
    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69
    ':'        shift, and go to state 185


State 177

   42 func_call: . IDENTIFIER '(' func_input ')'
   57 instr: . assign_instr ';'
   58      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   60      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   60      | KW_WHILE '(' expr ')' ':' . stmts KW_ENDWHILE ';'
   61      | . KW_BREAK ';'
   62      | . KW_CONTINUE ';'
   63      | . KW_RETURN ';'
   64      | . KW_RETURN expr ';'
   65      | . func_call ';'
   66 assign_instr: . IDENTIFIER '=' expr
   67             | . IDENTIFIER '[' expr ']' '=' expr
   68             | . IDENTIFIER OP_ASGN_ADD expr
   69             | . IDENTIFIER OP_ASGN_SUB expr
   70             | . IDENTIFIER OP_ASGN_MUL expr
   71             | . IDENTIFIER OP_ASGN_DIV expr
   72             | . IDENTIFIER OP_ASGN_MOD expr
   73 stmts: . instr
   74      | . instr stmts
   75      | . if_stmt
   76      | . if_stmt stmts
   77 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
   78        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 181
    KW_IF        shift, and go to state 101
    KW_FOR       shift, and go to state 102
    KW_WHILE     shift, and go to state 103
    KW_BREAK     shift, and go to state 104
    KW_CONTINUE  shift, and go to state 105
    KW_RETURN    shift, and go to state 106

    func_call     go to state 110
    instr         go to state 182
    assign_instr  go to state 112
    stmts         go to state 186
    if_stmt       go to state 184


State 178

    2 ident: . IDENTIFIER
    3      | . IDENTIFIER ',' ident
    4 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   31 var: . ident ':' data_type ';'
   32    | . IDENTIFIER '[' POSINT ']' ':' data_type ';'
   33    | . IDENTIFIER '[' ']' ':' data_type ';'
   34 func_body: . %empty  [KW_ENDDEF]
   35          | . var func_body
   36          | . const func_body
   37          | . instr func_body
   38          | . if_stmt func_body
   40 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' . func_body KW_ENDDEF ';'
   42 func_call: . IDENTIFIER '(' func_input ')'
   57 instr: . assign_instr ';'
   58      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   60      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   61      | . KW_BREAK ';'
   62      | . KW_CONTINUE ';'
   63      | . KW_RETURN ';'
   64      | . KW_RETURN expr ';'
   65      | . func_call ';'
   66 assign_instr: . IDENTIFIER '=' expr
   67             | . IDENTIFIER '[' expr ']' '=' expr
   68             | . IDENTIFIER OP_ASGN_ADD expr
   69             | . IDENTIFIER OP_ASGN_SUB expr
   70             | . IDENTIFIER OP_ASGN_MUL expr
   71             | . IDENTIFIER OP_ASGN_DIV expr
   72             | . IDENTIFIER OP_ASGN_MOD expr
   77 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
   78        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 100
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 101
    KW_FOR       shift, and go to state 102
    KW_WHILE     shift, and go to state 103
    KW_BREAK     shift, and go to state 104
    KW_CONTINUE  shift, and go to state 105
    KW_RETURN    shift, and go to state 106

    $default  reduce using rule 34 (func_body)

    ident         go to state 7
    const         go to state 107
    var           go to state 108
    func_body     go to state 187
    func_call     go to state 110
    instr         go to state 111
    assign_instr  go to state 112
    if_stmt       go to state 113


State 179

   39 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF . ';'

    ';'  shift, and go to state 188


State 180

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr
   67 assign_instr: IDENTIFIER '[' expr ']' '=' expr .  [';']

    KW_AND     shift, and go to state 56
    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69

    $default  reduce using rule 67 (assign_instr)


State 181

   42 func_call: IDENTIFIER . '(' func_input ')'
   66 assign_instr: IDENTIFIER . '=' expr
   67             | IDENTIFIER . '[' expr ']' '=' expr
   68             | IDENTIFIER . OP_ASGN_ADD expr
   69             | IDENTIFIER . OP_ASGN_SUB expr
   70             | IDENTIFIER . OP_ASGN_MUL expr
   71             | IDENTIFIER . OP_ASGN_DIV expr
   72             | IDENTIFIER . OP_ASGN_MOD expr

    OP_ASGN_ADD  shift, and go to state 123
    OP_ASGN_SUB  shift, and go to state 124
    OP_ASGN_MUL  shift, and go to state 125
    OP_ASGN_DIV  shift, and go to state 126
    OP_ASGN_MOD  shift, and go to state 127
    '='          shift, and go to state 128
    '('          shift, and go to state 50
    '['          shift, and go to state 189


State 182

   42 func_call: . IDENTIFIER '(' func_input ')'
   57 instr: . assign_instr ';'
   58      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   60      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   61      | . KW_BREAK ';'
   62      | . KW_CONTINUE ';'
   63      | . KW_RETURN ';'
   64      | . KW_RETURN expr ';'
   65      | . func_call ';'
   66 assign_instr: . IDENTIFIER '=' expr
   67             | . IDENTIFIER '[' expr ']' '=' expr
   68             | . IDENTIFIER OP_ASGN_ADD expr
   69             | . IDENTIFIER OP_ASGN_SUB expr
   70             | . IDENTIFIER OP_ASGN_MUL expr
   71             | . IDENTIFIER OP_ASGN_DIV expr
   72             | . IDENTIFIER OP_ASGN_MOD expr
   73 stmts: . instr
   73      | instr .  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE]
   74      | . instr stmts
   74      | instr . stmts
   75      | . if_stmt
   76      | . if_stmt stmts
   77 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
   78        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 181
    KW_IF        shift, and go to state 101
    KW_FOR       shift, and go to state 102
    KW_WHILE     shift, and go to state 103
    KW_BREAK     shift, and go to state 104
    KW_CONTINUE  shift, and go to state 105
    KW_RETURN    shift, and go to state 106

    $default  reduce using rule 73 (stmts)

    func_call     go to state 110
    instr         go to state 182
    assign_instr  go to state 112
    stmts         go to state 190
    if_stmt       go to state 184


State 183

   77 if_stmt: KW_IF '(' expr ')' ':' stmts . KW_ENDIF ';'
   78        | KW_IF '(' expr ')' ':' stmts . KW_ELSE ':' stmts KW_ENDIF ';'

    KW_ELSE   shift, and go to state 191
    KW_ENDIF  shift, and go to state 192


State 184

   42 func_call: . IDENTIFIER '(' func_input ')'
   57 instr: . assign_instr ';'
   58      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   60      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   61      | . KW_BREAK ';'
   62      | . KW_CONTINUE ';'
   63      | . KW_RETURN ';'
   64      | . KW_RETURN expr ';'
   65      | . func_call ';'
   66 assign_instr: . IDENTIFIER '=' expr
   67             | . IDENTIFIER '[' expr ']' '=' expr
   68             | . IDENTIFIER OP_ASGN_ADD expr
   69             | . IDENTIFIER OP_ASGN_SUB expr
   70             | . IDENTIFIER OP_ASGN_MUL expr
   71             | . IDENTIFIER OP_ASGN_DIV expr
   72             | . IDENTIFIER OP_ASGN_MOD expr
   73 stmts: . instr
   74      | . instr stmts
   75      | . if_stmt
   75      | if_stmt .  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE]
   76      | . if_stmt stmts
   76      | if_stmt . stmts
   77 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
   78        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 181
    KW_IF        shift, and go to state 101
    KW_FOR       shift, and go to state 102
    KW_WHILE     shift, and go to state 103
    KW_BREAK     shift, and go to state 104
    KW_CONTINUE  shift, and go to state 105
    KW_RETURN    shift, and go to state 106

    $default  reduce using rule 75 (stmts)

    func_call     go to state 110
    instr         go to state 182
    assign_instr  go to state 112
    stmts         go to state 193
    if_stmt       go to state 184


State 185

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'
   58 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' . expr ']' ':' stmts KW_ENDFOR ';'
   59      | KW_FOR IDENTIFIER KW_IN '[' expr ':' . expr ':' expr ']' ':' stmts KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 194
    func_call  go to state 43


State 186

   60 instr: KW_WHILE '(' expr ')' ':' stmts . KW_ENDWHILE ';'

    KW_ENDWHILE  shift, and go to state 195


State 187

   40 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body . KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 196


State 188

   39 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';' .

    $default  reduce using rule 39 (func_decl)


State 189

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'
   67 assign_instr: IDENTIFIER '[' . expr ']' '=' expr

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 157
    func_call  go to state 43


State 190

   74 stmts: instr stmts .

    $default  reduce using rule 74 (stmts)


State 191

   78 if_stmt: KW_IF '(' expr ')' ':' stmts KW_ELSE . ':' stmts KW_ENDIF ';'

    ':'  shift, and go to state 197


State 192

   77 if_stmt: KW_IF '(' expr ')' ':' stmts KW_ENDIF . ';'

    ';'  shift, and go to state 198


State 193

   76 stmts: if_stmt stmts .

    $default  reduce using rule 76 (stmts)


State 194

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr
   58 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr . ']' ':' stmts KW_ENDFOR ';'
   59      | KW_FOR IDENTIFIER KW_IN '[' expr ':' expr . ':' expr ']' ':' stmts KW_ENDFOR ';'

    KW_AND     shift, and go to state 56
    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69
    ']'        shift, and go to state 199
    ':'        shift, and go to state 200


State 195

   60 instr: KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE . ';'

    ';'  shift, and go to state 201


State 196

   40 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF . ';'

    ';'  shift, and go to state 202


State 197

   42 func_call: . IDENTIFIER '(' func_input ')'
   57 instr: . assign_instr ';'
   58      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   60      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   61      | . KW_BREAK ';'
   62      | . KW_CONTINUE ';'
   63      | . KW_RETURN ';'
   64      | . KW_RETURN expr ';'
   65      | . func_call ';'
   66 assign_instr: . IDENTIFIER '=' expr
   67             | . IDENTIFIER '[' expr ']' '=' expr
   68             | . IDENTIFIER OP_ASGN_ADD expr
   69             | . IDENTIFIER OP_ASGN_SUB expr
   70             | . IDENTIFIER OP_ASGN_MUL expr
   71             | . IDENTIFIER OP_ASGN_DIV expr
   72             | . IDENTIFIER OP_ASGN_MOD expr
   73 stmts: . instr
   74      | . instr stmts
   75      | . if_stmt
   76      | . if_stmt stmts
   77 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
   78        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'
   78        | KW_IF '(' expr ')' ':' stmts KW_ELSE ':' . stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 181
    KW_IF        shift, and go to state 101
    KW_FOR       shift, and go to state 102
    KW_WHILE     shift, and go to state 103
    KW_BREAK     shift, and go to state 104
    KW_CONTINUE  shift, and go to state 105
    KW_RETURN    shift, and go to state 106

    func_call     go to state 110
    instr         go to state 182
    assign_instr  go to state 112
    stmts         go to state 203
    if_stmt       go to state 184


State 198

   77 if_stmt: KW_IF '(' expr ')' ':' stmts KW_ENDIF ';' .

    $default  reduce using rule 77 (if_stmt)


State 199

   58 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' . ':' stmts KW_ENDFOR ';'

    ':'  shift, and go to state 204


State 200

    5 expr: . '+' expr
    6     | . '-' expr
    7     | . expr OP_POWER expr
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . expr '%' expr
   13     | . expr OP_EQUALS expr
   14     | . expr OP_NOT_EQ expr
   15     | . expr OP_LS expr
   16     | . expr OP_GRT expr
   17     | . expr OP_LS_EQ expr
   18     | . expr OP_GRT_EQ expr
   19     | . KW_NOT expr
   20     | . expr KW_AND expr
   21     | . expr KW_OR expr
   22     | . '(' expr ')'
   23     | . func_call
   24     | . KW_TRUE
   25     | . KW_FALSE
   26     | . IDENTIFIER
   27     | . IDENTIFIER '[' expr ']'
   28     | . STRING
   29     | . REAL
   30     | . POSINT
   42 func_call: . IDENTIFIER '(' func_input ')'
   59 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' . expr ']' ':' stmts KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 32
    POSINT      shift, and go to state 33
    REAL        shift, and go to state 34
    STRING      shift, and go to state 35
    KW_TRUE     shift, and go to state 36
    KW_FALSE    shift, and go to state 37
    KW_NOT      shift, and go to state 38
    '+'         shift, and go to state 39
    '-'         shift, and go to state 40
    '('         shift, and go to state 41

    expr       go to state 205
    func_call  go to state 43


State 201

   60 instr: KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';' .

    $default  reduce using rule 60 (instr)


State 202

   40 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';' .

    $default  reduce using rule 40 (func_decl)


State 203

   78 if_stmt: KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts . KW_ENDIF ';'

    KW_ENDIF  shift, and go to state 206


State 204

   42 func_call: . IDENTIFIER '(' func_input ')'
   57 instr: . assign_instr ';'
   58      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   58      | KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' . stmts KW_ENDFOR ';'
   59      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   60      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   61      | . KW_BREAK ';'
   62      | . KW_CONTINUE ';'
   63      | . KW_RETURN ';'
   64      | . KW_RETURN expr ';'
   65      | . func_call ';'
   66 assign_instr: . IDENTIFIER '=' expr
   67             | . IDENTIFIER '[' expr ']' '=' expr
   68             | . IDENTIFIER OP_ASGN_ADD expr
   69             | . IDENTIFIER OP_ASGN_SUB expr
   70             | . IDENTIFIER OP_ASGN_MUL expr
   71             | . IDENTIFIER OP_ASGN_DIV expr
   72             | . IDENTIFIER OP_ASGN_MOD expr
   73 stmts: . instr
   74      | . instr stmts
   75      | . if_stmt
   76      | . if_stmt stmts
   77 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
   78        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 181
    KW_IF        shift, and go to state 101
    KW_FOR       shift, and go to state 102
    KW_WHILE     shift, and go to state 103
    KW_BREAK     shift, and go to state 104
    KW_CONTINUE  shift, and go to state 105
    KW_RETURN    shift, and go to state 106

    func_call     go to state 110
    instr         go to state 182
    assign_instr  go to state 112
    stmts         go to state 207
    if_stmt       go to state 184


State 205

    7 expr: expr . OP_POWER expr
    8     | expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | expr . '%' expr
   13     | expr . OP_EQUALS expr
   14     | expr . OP_NOT_EQ expr
   15     | expr . OP_LS expr
   16     | expr . OP_GRT expr
   17     | expr . OP_LS_EQ expr
   18     | expr . OP_GRT_EQ expr
   20     | expr . KW_AND expr
   21     | expr . KW_OR expr
   59 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr . ']' ':' stmts KW_ENDFOR ';'

    KW_AND     shift, and go to state 56
    KW_OR      shift, and go to state 57
    OP_POWER   shift, and go to state 58
    OP_EQUALS  shift, and go to state 59
    OP_NOT_EQ  shift, and go to state 60
    OP_LS      shift, and go to state 61
    OP_LS_EQ   shift, and go to state 62
    OP_GRT     shift, and go to state 63
    OP_GRT_EQ  shift, and go to state 64
    '+'        shift, and go to state 65
    '-'        shift, and go to state 66
    '*'        shift, and go to state 67
    '/'        shift, and go to state 68
    '%'        shift, and go to state 69
    ']'        shift, and go to state 208


State 206

   78 if_stmt: KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF . ';'

    ';'  shift, and go to state 209


State 207

   58 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts . KW_ENDFOR ';'

    KW_ENDFOR  shift, and go to state 210


State 208

   59 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' . ':' stmts KW_ENDFOR ';'

    ':'  shift, and go to state 211


State 209

   78 if_stmt: KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';' .

    $default  reduce using rule 78 (if_stmt)


State 210

   58 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR . ';'

    ';'  shift, and go to state 212


State 211

   42 func_call: . IDENTIFIER '(' func_input ')'
   57 instr: . assign_instr ';'
   58      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   59      | KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' . stmts KW_ENDFOR ';'
   60      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   61      | . KW_BREAK ';'
   62      | . KW_CONTINUE ';'
   63      | . KW_RETURN ';'
   64      | . KW_RETURN expr ';'
   65      | . func_call ';'
   66 assign_instr: . IDENTIFIER '=' expr
   67             | . IDENTIFIER '[' expr ']' '=' expr
   68             | . IDENTIFIER OP_ASGN_ADD expr
   69             | . IDENTIFIER OP_ASGN_SUB expr
   70             | . IDENTIFIER OP_ASGN_MUL expr
   71             | . IDENTIFIER OP_ASGN_DIV expr
   72             | . IDENTIFIER OP_ASGN_MOD expr
   73 stmts: . instr
   74      | . instr stmts
   75      | . if_stmt
   76      | . if_stmt stmts
   77 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
   78        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 181
    KW_IF        shift, and go to state 101
    KW_FOR       shift, and go to state 102
    KW_WHILE     shift, and go to state 103
    KW_BREAK     shift, and go to state 104
    KW_CONTINUE  shift, and go to state 105
    KW_RETURN    shift, and go to state 106

    func_call     go to state 110
    instr         go to state 182
    assign_instr  go to state 112
    stmts         go to state 213
    if_stmt       go to state 184


State 212

   58 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';' .

    $default  reduce using rule 58 (instr)


State 213

   59 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts . KW_ENDFOR ';'

    KW_ENDFOR  shift, and go to state 214


State 214

   59 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR . ';'

    ';'  shift, and go to state 215


State 215

   59 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';' .

    $default  reduce using rule 59 (instr)
