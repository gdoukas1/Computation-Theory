Grammar

    0 $accept: program $end

    1 program: decl_list

    2 comp_IDENT: '#' IDENTIFIER

    3 comp_ident: comp_IDENT
    4           | comp_IDENT '[' POSINT ']'
    5           | comp_IDENT '[' ']'
    6           | comp_IDENT ',' comp_ident
    7           | comp_IDENT '[' POSINT ']' ',' comp_ident
    8           | comp_IDENT '[' ']' ',' comp_ident

    9 comp_var: comp_ident ':' data_type ';'
   10         | comp_ident ':' IDENTIFIER ';'

   11 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   12               | KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   13               | KW_DEF IDENTIFIER '(' parameters ')' ':' func_body KW_ENDDEF ';'

   14 comp_body: comp_var
   15          | comp_body comp_var
   16          | comp_body comp_func_decl

   17 comp: KW_COMP IDENTIFIER ':' comp_body KW_ENDCOMP ';'

   18 ident: IDENTIFIER
   19      | IDENTIFIER '[' POSINT ']'
   20      | IDENTIFIER '[' ']'
   21      | IDENTIFIER ',' ident
   22      | IDENTIFIER '[' POSINT ']' ',' ident
   23      | IDENTIFIER '[' ']' ',' ident

   24 const: KW_CONST IDENTIFIER '=' expr ':' data_type ';'

   25 expr: '+' expr
   26     | '-' expr
   27     | expr OP_POWER expr
   28     | expr '+' expr
   29     | expr '-' expr
   30     | expr '*' expr
   31     | expr '/' expr
   32     | expr '%' expr
   33     | expr OP_EQUALS expr
   34     | expr OP_NOT_EQ expr
   35     | expr OP_LS expr
   36     | expr OP_GRT expr
   37     | expr OP_LS_EQ expr
   38     | expr OP_GRT_EQ expr
   39     | KW_NOT expr
   40     | expr KW_AND expr
   41     | expr KW_OR expr
   42     | '(' expr ')'
   43     | func_call
   44     | KW_TRUE
   45     | KW_FALSE
   46     | IDENTIFIER '[' expr ']'
   47     | comp_IDENT
   48     | comp_IDENT '[' expr ']'
   49     | expr '.' comp_IDENT
   50     | expr '.' comp_IDENT '[' expr ']'
   51     | IDENTIFIER
   52     | STRING
   53     | REAL
   54     | POSINT

   55 var: ident ':' data_type ';'
   56    | ident ':' IDENTIFIER ';'

   57 func_body: %empty
   58          | var func_body
   59          | const func_body
   60          | instr func_body
   61          | if_stmt func_body

   62 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   63          | KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   64          | KW_DEF IDENTIFIER '(' parameters ')' ':' func_body KW_ENDDEF ';'
   65          | KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT IDENTIFIER ':' func_body KW_ENDDEF ';'

   66 func_call: IDENTIFIER '(' func_input ')'
   67          | expr '.' IDENTIFIER '(' func_input ')'

   68 func_input: %empty
   69           | expr
   70           | expr ',' func_input

   71 parameters: %empty
   72           | IDENTIFIER ':' data_type
   73           | IDENTIFIER ':' IDENTIFIER
   74           | IDENTIFIER '[' ']' ':' data_type
   75           | IDENTIFIER ':' data_type ',' parameters
   76           | IDENTIFIER ':' IDENTIFIER ',' parameters
   77           | IDENTIFIER '[' ']' ':' data_type ',' parameters

   78 main_func: KW_DEF KW_MAIN '(' ')' ':' func_body KW_ENDDEF ';'

   79 decl_list: %empty
   80          | decl_list comp
   81          | decl_list const
   82          | decl_list var
   83          | decl_list func_decl
   84          | decl_list main_func

   85 instr: assign_instr ';'
   86      | KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | KW_BREAK ';'
   92      | KW_CONTINUE ';'
   93      | KW_RETURN ';'
   94      | KW_RETURN expr ';'
   95      | func_call ';'

   96 assign_instr: expr '=' expr
   97             | expr OP_ASGN_ADD expr
   98             | expr OP_ASGN_SUB expr
   99             | expr OP_ASGN_MUL expr
  100             | expr OP_ASGN_DIV expr
  101             | expr OP_ASGN_MOD expr

  102 stmts: instr
  103      | instr stmts
  104      | if_stmt
  105      | if_stmt stmts

  106 if_stmt: KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

  108 data_type: KW_BOOL
  109          | KW_INT
  110          | KW_SCALAR
  111          | KW_STRING
  112          | KW_VOID


Terminals, with rules where they appear

    $end (0) 0
    '#' (35) 2
    '%' (37) 32
    '(' (40) 11 12 13 42 62 63 64 65 66 67 78 90 106 107
    ')' (41) 11 12 13 42 62 63 64 65 66 67 78 90 106 107
    '*' (42) 30
    '+' (43) 25 28
    ',' (44) 6 7 8 21 22 23 70 75 76 77
    '-' (45) 11 12 26 29 62 63 65
    '.' (46) 49 50 67
    '/' (47) 31
    ':' (58) 9 10 11 12 13 17 24 55 56 62 63 64 65 72 73 74 75 76 77 78 86 87 88 89 90 106 107
    ';' (59) 9 10 11 12 13 17 24 55 56 62 63 64 65 78 85 86 87 88 89 90 91 92 93 94 95 106 107
    '=' (61) 24 96
    '[' (91) 4 5 7 8 12 19 20 22 23 46 48 50 63 74 77 86 87 88 89
    ']' (93) 4 5 7 8 12 19 20 22 23 46 48 50 63 74 77 86 87 88 89
    error (256)
    IDENTIFIER <crepr> (258) 2 10 11 12 13 17 18 19 20 21 22 23 24 46 51 56 62 63 64 65 66 67 72 73 74 75 76 77 86 87
    POSINT <crepr> (259) 4 7 19 22 54
    REAL <crepr> (260) 53
    STRING <crepr> (261) 52
    KW_INT (262) 109
    KW_SCALAR (263) 110
    KW_STRING (264) 111
    KW_VOID (265) 112
    KW_BOOL (266) 108
    KW_TRUE (267) 44
    KW_FALSE (268) 45
    KW_CONST (269) 24
    KW_IF (270) 106 107
    KW_ELSE (271) 107
    KW_ENDIF (272) 106 107
    KW_FOR (273) 86 87 88 89
    KW_IN (274) 86 87 88 89
    KW_ENDFOR (275) 86 87 88 89
    KW_WHILE (276) 90
    KW_ENDWHILE (277) 90
    KW_BREAK (278) 91
    KW_CONTINUE (279) 92
    KW_NOT (280) 39
    KW_AND (281) 40
    KW_OR (282) 41
    KW_DEF (283) 11 12 13 62 63 64 65 78
    KW_ENDDEF (284) 11 12 13 62 63 64 65 78
    KW_COMP (285) 17
    KW_ENDCOMP (286) 17
    KW_RETURN (287) 93 94
    KW_MAIN (288) 78
    OP_ASGN_ADD (289) 97
    OP_ASGN_SUB (290) 98
    OP_ASGN_MUL (291) 99
    OP_ASGN_DIV (292) 100
    OP_ASGN_MOD (293) 101
    OP_POWER (294) 27
    OP_EQUALS (295) 33
    OP_NOT_EQ (296) 34
    OP_LS (297) 35
    OP_LS_EQ (298) 37
    OP_GRT (299) 11 12 36 62 63 65
    OP_GRT_EQ (300) 38
    OP_SIGN (301)


Nonterminals, with rules where they appear

    $accept (62)
        on left: 0
    program (63)
        on left: 1
        on right: 0
    comp_IDENT <crepr> (64)
        on left: 2
        on right: 3 4 5 6 7 8 47 48 49 50 88 89
    comp_ident <crepr> (65)
        on left: 3 4 5 6 7 8
        on right: 6 7 8 9 10
    comp_var <crepr> (66)
        on left: 9 10
        on right: 14 15
    comp_func_decl <crepr> (67)
        on left: 11 12 13
        on right: 16
    comp_body <crepr> (68)
        on left: 14 15 16
        on right: 15 16 17
    comp <crepr> (69)
        on left: 17
        on right: 80
    ident <crepr> (70)
        on left: 18 19 20 21 22 23
        on right: 21 22 23 55 56
    const <crepr> (71)
        on left: 24
        on right: 59 81
    expr <crepr> (72)
        on left: 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54
        on right: 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 46 48 49 50 67 69 70 86 87 88 89 90 94 96 97 98 99 100 101 106 107
    var <crepr> (73)
        on left: 55 56
        on right: 58 82
    func_body <crepr> (74)
        on left: 57 58 59 60 61
        on right: 11 12 13 58 59 60 61 62 63 64 65 78
    func_decl <crepr> (75)
        on left: 62 63 64 65
        on right: 83
    func_call <crepr> (76)
        on left: 66 67
        on right: 43 95
    func_input <crepr> (77)
        on left: 68 69 70
        on right: 66 67 70
    parameters <crepr> (78)
        on left: 71 72 73 74 75 76 77
        on right: 11 12 13 62 63 64 65 75 76 77
    main_func <crepr> (79)
        on left: 78
        on right: 84
    decl_list <crepr> (80)
        on left: 79 80 81 82 83 84
        on right: 1 80 81 82 83 84
    instr <crepr> (81)
        on left: 85 86 87 88 89 90 91 92 93 94 95
        on right: 60 102 103
    assign_instr <crepr> (82)
        on left: 96 97 98 99 100 101
        on right: 85
    stmts <crepr> (83)
        on left: 102 103 104 105
        on right: 86 87 88 89 90 103 105 106 107
    if_stmt <crepr> (84)
        on left: 106 107
        on right: 61 104 105
    data_type <crepr> (85)
        on left: 108 109 110 111 112
        on right: 9 11 12 24 55 62 63 72 74 75 77


State 0

    0 $accept: . program $end
    1 program: . decl_list
   79 decl_list: . %empty
   80          | . decl_list comp
   81          | . decl_list const
   82          | . decl_list var
   83          | . decl_list func_decl
   84          | . decl_list main_func

    $default  reduce using rule 79 (decl_list)

    program    go to state 1
    decl_list  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: decl_list .  [$end]
   17 comp: . KW_COMP IDENTIFIER ':' comp_body KW_ENDCOMP ';'
   18 ident: . IDENTIFIER
   19      | . IDENTIFIER '[' POSINT ']'
   20      | . IDENTIFIER '[' ']'
   21      | . IDENTIFIER ',' ident
   22      | . IDENTIFIER '[' POSINT ']' ',' ident
   23      | . IDENTIFIER '[' ']' ',' ident
   24 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   55 var: . ident ':' data_type ';'
   56    | . ident ':' IDENTIFIER ';'
   62 func_decl: . KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   63          | . KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   64          | . KW_DEF IDENTIFIER '(' parameters ')' ':' func_body KW_ENDDEF ';'
   65          | . KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT IDENTIFIER ':' func_body KW_ENDDEF ';'
   78 main_func: . KW_DEF KW_MAIN '(' ')' ':' func_body KW_ENDDEF ';'
   80 decl_list: decl_list . comp
   81          | decl_list . const
   82          | decl_list . var
   83          | decl_list . func_decl
   84          | decl_list . main_func

    IDENTIFIER  shift, and go to state 4
    KW_CONST    shift, and go to state 5
    KW_DEF      shift, and go to state 6
    KW_COMP     shift, and go to state 7

    $default  reduce using rule 1 (program)

    comp       go to state 8
    ident      go to state 9
    const      go to state 10
    var        go to state 11
    func_decl  go to state 12
    main_func  go to state 13


State 3

    0 $accept: program $end .

    $default  accept


State 4

   18 ident: IDENTIFIER .  [':']
   19      | IDENTIFIER . '[' POSINT ']'
   20      | IDENTIFIER . '[' ']'
   21      | IDENTIFIER . ',' ident
   22      | IDENTIFIER . '[' POSINT ']' ',' ident
   23      | IDENTIFIER . '[' ']' ',' ident

    '['  shift, and go to state 14
    ','  shift, and go to state 15

    $default  reduce using rule 18 (ident)


State 5

   24 const: KW_CONST . IDENTIFIER '=' expr ':' data_type ';'

    IDENTIFIER  shift, and go to state 16


State 6

   62 func_decl: KW_DEF . IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   63          | KW_DEF . IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   64          | KW_DEF . IDENTIFIER '(' parameters ')' ':' func_body KW_ENDDEF ';'
   65          | KW_DEF . IDENTIFIER '(' parameters ')' '-' OP_GRT IDENTIFIER ':' func_body KW_ENDDEF ';'
   78 main_func: KW_DEF . KW_MAIN '(' ')' ':' func_body KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 17
    KW_MAIN     shift, and go to state 18


State 7

   17 comp: KW_COMP . IDENTIFIER ':' comp_body KW_ENDCOMP ';'

    IDENTIFIER  shift, and go to state 19


State 8

   80 decl_list: decl_list comp .

    $default  reduce using rule 80 (decl_list)


State 9

   55 var: ident . ':' data_type ';'
   56    | ident . ':' IDENTIFIER ';'

    ':'  shift, and go to state 20


State 10

   81 decl_list: decl_list const .

    $default  reduce using rule 81 (decl_list)


State 11

   82 decl_list: decl_list var .

    $default  reduce using rule 82 (decl_list)


State 12

   83 decl_list: decl_list func_decl .

    $default  reduce using rule 83 (decl_list)


State 13

   84 decl_list: decl_list main_func .

    $default  reduce using rule 84 (decl_list)


State 14

   19 ident: IDENTIFIER '[' . POSINT ']'
   20      | IDENTIFIER '[' . ']'
   22      | IDENTIFIER '[' . POSINT ']' ',' ident
   23      | IDENTIFIER '[' . ']' ',' ident

    POSINT  shift, and go to state 21
    ']'     shift, and go to state 22


State 15

   18 ident: . IDENTIFIER
   19      | . IDENTIFIER '[' POSINT ']'
   20      | . IDENTIFIER '[' ']'
   21      | . IDENTIFIER ',' ident
   21      | IDENTIFIER ',' . ident
   22      | . IDENTIFIER '[' POSINT ']' ',' ident
   23      | . IDENTIFIER '[' ']' ',' ident

    IDENTIFIER  shift, and go to state 4

    ident  go to state 23


State 16

   24 const: KW_CONST IDENTIFIER . '=' expr ':' data_type ';'

    '='  shift, and go to state 24


State 17

   62 func_decl: KW_DEF IDENTIFIER . '(' parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   63          | KW_DEF IDENTIFIER . '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   64          | KW_DEF IDENTIFIER . '(' parameters ')' ':' func_body KW_ENDDEF ';'
   65          | KW_DEF IDENTIFIER . '(' parameters ')' '-' OP_GRT IDENTIFIER ':' func_body KW_ENDDEF ';'

    '('  shift, and go to state 25


State 18

   78 main_func: KW_DEF KW_MAIN . '(' ')' ':' func_body KW_ENDDEF ';'

    '('  shift, and go to state 26


State 19

   17 comp: KW_COMP IDENTIFIER . ':' comp_body KW_ENDCOMP ';'

    ':'  shift, and go to state 27


State 20

   55 var: ident ':' . data_type ';'
   56    | ident ':' . IDENTIFIER ';'
  108 data_type: . KW_BOOL
  109          | . KW_INT
  110          | . KW_SCALAR
  111          | . KW_STRING
  112          | . KW_VOID

    IDENTIFIER  shift, and go to state 28
    KW_INT      shift, and go to state 29
    KW_SCALAR   shift, and go to state 30
    KW_STRING   shift, and go to state 31
    KW_VOID     shift, and go to state 32
    KW_BOOL     shift, and go to state 33

    data_type  go to state 34


State 21

   19 ident: IDENTIFIER '[' POSINT . ']'
   22      | IDENTIFIER '[' POSINT . ']' ',' ident

    ']'  shift, and go to state 35


State 22

   20 ident: IDENTIFIER '[' ']' .  [':']
   23      | IDENTIFIER '[' ']' . ',' ident

    ','  shift, and go to state 36

    $default  reduce using rule 20 (ident)


State 23

   21 ident: IDENTIFIER ',' ident .

    $default  reduce using rule 21 (ident)


State 24

    2 comp_IDENT: . '#' IDENTIFIER
   24 const: KW_CONST IDENTIFIER '=' . expr ':' data_type ';'
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 49
    func_call   go to state 50


State 25

   62 func_decl: KW_DEF IDENTIFIER '(' . parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   63          | KW_DEF IDENTIFIER '(' . parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   64          | KW_DEF IDENTIFIER '(' . parameters ')' ':' func_body KW_ENDDEF ';'
   65          | KW_DEF IDENTIFIER '(' . parameters ')' '-' OP_GRT IDENTIFIER ':' func_body KW_ENDDEF ';'
   71 parameters: . %empty  [')']
   72           | . IDENTIFIER ':' data_type
   73           | . IDENTIFIER ':' IDENTIFIER
   74           | . IDENTIFIER '[' ']' ':' data_type
   75           | . IDENTIFIER ':' data_type ',' parameters
   76           | . IDENTIFIER ':' IDENTIFIER ',' parameters
   77           | . IDENTIFIER '[' ']' ':' data_type ',' parameters

    IDENTIFIER  shift, and go to state 51

    $default  reduce using rule 71 (parameters)

    parameters  go to state 52


State 26

   78 main_func: KW_DEF KW_MAIN '(' . ')' ':' func_body KW_ENDDEF ';'

    ')'  shift, and go to state 53


State 27

    2 comp_IDENT: . '#' IDENTIFIER
    3 comp_ident: . comp_IDENT
    4           | . comp_IDENT '[' POSINT ']'
    5           | . comp_IDENT '[' ']'
    6           | . comp_IDENT ',' comp_ident
    7           | . comp_IDENT '[' POSINT ']' ',' comp_ident
    8           | . comp_IDENT '[' ']' ',' comp_ident
    9 comp_var: . comp_ident ':' data_type ';'
   10         | . comp_ident ':' IDENTIFIER ';'
   14 comp_body: . comp_var
   15          | . comp_body comp_var
   16          | . comp_body comp_func_decl
   17 comp: KW_COMP IDENTIFIER ':' . comp_body KW_ENDCOMP ';'

    '#'  shift, and go to state 47

    comp_IDENT  go to state 54
    comp_ident  go to state 55
    comp_var    go to state 56
    comp_body   go to state 57


State 28

   56 var: ident ':' IDENTIFIER . ';'

    ';'  shift, and go to state 58


State 29

  109 data_type: KW_INT .

    $default  reduce using rule 109 (data_type)


State 30

  110 data_type: KW_SCALAR .

    $default  reduce using rule 110 (data_type)


State 31

  111 data_type: KW_STRING .

    $default  reduce using rule 111 (data_type)


State 32

  112 data_type: KW_VOID .

    $default  reduce using rule 112 (data_type)


State 33

  108 data_type: KW_BOOL .

    $default  reduce using rule 108 (data_type)


State 34

   55 var: ident ':' data_type . ';'

    ';'  shift, and go to state 59


State 35

   19 ident: IDENTIFIER '[' POSINT ']' .  [':']
   22      | IDENTIFIER '[' POSINT ']' . ',' ident

    ','  shift, and go to state 60

    $default  reduce using rule 19 (ident)


State 36

   18 ident: . IDENTIFIER
   19      | . IDENTIFIER '[' POSINT ']'
   20      | . IDENTIFIER '[' ']'
   21      | . IDENTIFIER ',' ident
   22      | . IDENTIFIER '[' POSINT ']' ',' ident
   23      | . IDENTIFIER '[' ']' ',' ident
   23      | IDENTIFIER '[' ']' ',' . ident

    IDENTIFIER  shift, and go to state 4

    ident  go to state 61


State 37

   46 expr: IDENTIFIER . '[' expr ']'
   51     | IDENTIFIER .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '=', '+', '-', '*', '/', '%', ')', ']', '.', ',', ':', ';']
   66 func_call: IDENTIFIER . '(' func_input ')'

    '('  shift, and go to state 62
    '['  shift, and go to state 63

    $default  reduce using rule 51 (expr)


State 38

   54 expr: POSINT .

    $default  reduce using rule 54 (expr)


State 39

   53 expr: REAL .

    $default  reduce using rule 53 (expr)


State 40

   52 expr: STRING .

    $default  reduce using rule 52 (expr)


State 41

   44 expr: KW_TRUE .

    $default  reduce using rule 44 (expr)


State 42

   45 expr: KW_FALSE .

    $default  reduce using rule 45 (expr)


State 43

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   39     | KW_NOT . expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 64
    func_call   go to state 50


State 44

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   25     | '+' . expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 65
    func_call   go to state 50


State 45

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   26     | '-' . expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 66
    func_call   go to state 50


State 46

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   42     | '(' . expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 67
    func_call   go to state 50


State 47

    2 comp_IDENT: '#' . IDENTIFIER

    IDENTIFIER  shift, and go to state 68


State 48

   47 expr: comp_IDENT .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '=', '+', '-', '*', '/', '%', ')', ']', '.', ',', ':', ';']
   48     | comp_IDENT . '[' expr ']'

    '['  shift, and go to state 69

    $default  reduce using rule 47 (expr)


State 49

   24 const: KW_CONST IDENTIFIER '=' expr . ':' data_type ';'
   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    '.'        shift, and go to state 84
    ':'        shift, and go to state 85


State 50

   43 expr: func_call .

    $default  reduce using rule 43 (expr)


State 51

   72 parameters: IDENTIFIER . ':' data_type
   73           | IDENTIFIER . ':' IDENTIFIER
   74           | IDENTIFIER . '[' ']' ':' data_type
   75           | IDENTIFIER . ':' data_type ',' parameters
   76           | IDENTIFIER . ':' IDENTIFIER ',' parameters
   77           | IDENTIFIER . '[' ']' ':' data_type ',' parameters

    '['  shift, and go to state 86
    ':'  shift, and go to state 87


State 52

   62 func_decl: KW_DEF IDENTIFIER '(' parameters . ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   63          | KW_DEF IDENTIFIER '(' parameters . ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   64          | KW_DEF IDENTIFIER '(' parameters . ')' ':' func_body KW_ENDDEF ';'
   65          | KW_DEF IDENTIFIER '(' parameters . ')' '-' OP_GRT IDENTIFIER ':' func_body KW_ENDDEF ';'

    ')'  shift, and go to state 88


State 53

   78 main_func: KW_DEF KW_MAIN '(' ')' . ':' func_body KW_ENDDEF ';'

    ':'  shift, and go to state 89


State 54

    3 comp_ident: comp_IDENT .  [':']
    4           | comp_IDENT . '[' POSINT ']'
    5           | comp_IDENT . '[' ']'
    6           | comp_IDENT . ',' comp_ident
    7           | comp_IDENT . '[' POSINT ']' ',' comp_ident
    8           | comp_IDENT . '[' ']' ',' comp_ident

    '['  shift, and go to state 90
    ','  shift, and go to state 91

    $default  reduce using rule 3 (comp_ident)


State 55

    9 comp_var: comp_ident . ':' data_type ';'
   10         | comp_ident . ':' IDENTIFIER ';'

    ':'  shift, and go to state 92


State 56

   14 comp_body: comp_var .

    $default  reduce using rule 14 (comp_body)


State 57

    2 comp_IDENT: . '#' IDENTIFIER
    3 comp_ident: . comp_IDENT
    4           | . comp_IDENT '[' POSINT ']'
    5           | . comp_IDENT '[' ']'
    6           | . comp_IDENT ',' comp_ident
    7           | . comp_IDENT '[' POSINT ']' ',' comp_ident
    8           | . comp_IDENT '[' ']' ',' comp_ident
    9 comp_var: . comp_ident ':' data_type ';'
   10         | . comp_ident ':' IDENTIFIER ';'
   11 comp_func_decl: . KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   12               | . KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   13               | . KW_DEF IDENTIFIER '(' parameters ')' ':' func_body KW_ENDDEF ';'
   15 comp_body: comp_body . comp_var
   16          | comp_body . comp_func_decl
   17 comp: KW_COMP IDENTIFIER ':' comp_body . KW_ENDCOMP ';'

    KW_DEF      shift, and go to state 93
    KW_ENDCOMP  shift, and go to state 94
    '#'         shift, and go to state 47

    comp_IDENT      go to state 54
    comp_ident      go to state 55
    comp_var        go to state 95
    comp_func_decl  go to state 96


State 58

   56 var: ident ':' IDENTIFIER ';' .

    $default  reduce using rule 56 (var)


State 59

   55 var: ident ':' data_type ';' .

    $default  reduce using rule 55 (var)


State 60

   18 ident: . IDENTIFIER
   19      | . IDENTIFIER '[' POSINT ']'
   20      | . IDENTIFIER '[' ']'
   21      | . IDENTIFIER ',' ident
   22      | . IDENTIFIER '[' POSINT ']' ',' ident
   22      | IDENTIFIER '[' POSINT ']' ',' . ident
   23      | . IDENTIFIER '[' ']' ',' ident

    IDENTIFIER  shift, and go to state 4

    ident  go to state 97


State 61

   23 ident: IDENTIFIER '[' ']' ',' ident .

    $default  reduce using rule 23 (ident)


State 62

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   66          | IDENTIFIER '(' . func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   68 func_input: . %empty  [')']
   69           | . expr
   70           | . expr ',' func_input

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    $default  reduce using rule 68 (func_input)

    comp_IDENT  go to state 48
    expr        go to state 98
    func_call   go to state 50
    func_input  go to state 99


State 63

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   46     | IDENTIFIER '[' . expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 100
    func_call   go to state 50


State 64

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   39     | KW_NOT expr .  [OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, '=', ')', ']', ',', ':', ';']
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    '.'        shift, and go to state 84

    $default  reduce using rule 39 (expr)

    Conflict between rule 39 and token KW_AND resolved as shift (KW_NOT < KW_AND).
    Conflict between rule 39 and token KW_OR resolved as shift (KW_NOT < KW_OR).
    Conflict between rule 39 and token OP_POWER resolved as shift (KW_NOT < OP_POWER).
    Conflict between rule 39 and token OP_EQUALS resolved as shift (KW_NOT < OP_EQUALS).
    Conflict between rule 39 and token OP_NOT_EQ resolved as shift (KW_NOT < OP_NOT_EQ).
    Conflict between rule 39 and token OP_LS resolved as shift (KW_NOT < OP_LS).
    Conflict between rule 39 and token OP_LS_EQ resolved as shift (KW_NOT < OP_LS_EQ).
    Conflict between rule 39 and token OP_GRT resolved as shift (KW_NOT < OP_GRT).
    Conflict between rule 39 and token OP_GRT_EQ resolved as shift (KW_NOT < OP_GRT_EQ).
    Conflict between rule 39 and token '+' resolved as shift (KW_NOT < '+').
    Conflict between rule 39 and token '-' resolved as shift (KW_NOT < '-').
    Conflict between rule 39 and token '*' resolved as shift (KW_NOT < '*').
    Conflict between rule 39 and token '/' resolved as shift (KW_NOT < '/').
    Conflict between rule 39 and token '%' resolved as shift (KW_NOT < '%').
    Conflict between rule 39 and token '.' resolved as shift (KW_NOT < '.').


State 65

   25 expr: '+' expr .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '=', '+', '-', '*', '/', '%', ')', ']', ',', ':', ';']
   27     | expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    '.'  shift, and go to state 84

    $default  reduce using rule 25 (expr)

    Conflict between rule 25 and token KW_AND resolved as reduce (KW_AND < OP_SIGN).
    Conflict between rule 25 and token KW_OR resolved as reduce (KW_OR < OP_SIGN).
    Conflict between rule 25 and token OP_POWER resolved as reduce (OP_POWER < OP_SIGN).
    Conflict between rule 25 and token OP_EQUALS resolved as reduce (OP_EQUALS < OP_SIGN).
    Conflict between rule 25 and token OP_NOT_EQ resolved as reduce (OP_NOT_EQ < OP_SIGN).
    Conflict between rule 25 and token OP_LS resolved as reduce (OP_LS < OP_SIGN).
    Conflict between rule 25 and token OP_LS_EQ resolved as reduce (OP_LS_EQ < OP_SIGN).
    Conflict between rule 25 and token OP_GRT resolved as reduce (OP_GRT < OP_SIGN).
    Conflict between rule 25 and token OP_GRT_EQ resolved as reduce (OP_GRT_EQ < OP_SIGN).
    Conflict between rule 25 and token '+' resolved as reduce ('+' < OP_SIGN).
    Conflict between rule 25 and token '-' resolved as reduce ('-' < OP_SIGN).
    Conflict between rule 25 and token '*' resolved as reduce ('*' < OP_SIGN).
    Conflict between rule 25 and token '/' resolved as reduce ('/' < OP_SIGN).
    Conflict between rule 25 and token '%' resolved as reduce ('%' < OP_SIGN).
    Conflict between rule 25 and token '.' resolved as shift (OP_SIGN < '.').


State 66

   26 expr: '-' expr .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '=', '+', '-', '*', '/', '%', ')', ']', ',', ':', ';']
   27     | expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    '.'  shift, and go to state 84

    $default  reduce using rule 26 (expr)

    Conflict between rule 26 and token KW_AND resolved as reduce (KW_AND < OP_SIGN).
    Conflict between rule 26 and token KW_OR resolved as reduce (KW_OR < OP_SIGN).
    Conflict between rule 26 and token OP_POWER resolved as reduce (OP_POWER < OP_SIGN).
    Conflict between rule 26 and token OP_EQUALS resolved as reduce (OP_EQUALS < OP_SIGN).
    Conflict between rule 26 and token OP_NOT_EQ resolved as reduce (OP_NOT_EQ < OP_SIGN).
    Conflict between rule 26 and token OP_LS resolved as reduce (OP_LS < OP_SIGN).
    Conflict between rule 26 and token OP_LS_EQ resolved as reduce (OP_LS_EQ < OP_SIGN).
    Conflict between rule 26 and token OP_GRT resolved as reduce (OP_GRT < OP_SIGN).
    Conflict between rule 26 and token OP_GRT_EQ resolved as reduce (OP_GRT_EQ < OP_SIGN).
    Conflict between rule 26 and token '+' resolved as reduce ('+' < OP_SIGN).
    Conflict between rule 26 and token '-' resolved as reduce ('-' < OP_SIGN).
    Conflict between rule 26 and token '*' resolved as reduce ('*' < OP_SIGN).
    Conflict between rule 26 and token '/' resolved as reduce ('/' < OP_SIGN).
    Conflict between rule 26 and token '%' resolved as reduce ('%' < OP_SIGN).
    Conflict between rule 26 and token '.' resolved as shift (OP_SIGN < '.').


State 67

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   42     | '(' expr . ')'
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    ')'        shift, and go to state 101
    '.'        shift, and go to state 84


State 68

    2 comp_IDENT: '#' IDENTIFIER .

    $default  reduce using rule 2 (comp_IDENT)


State 69

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   48     | comp_IDENT '[' . expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 102
    func_call   go to state 50


State 70

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   40     | expr KW_AND . expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 103
    func_call   go to state 50


State 71

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   41     | expr KW_OR . expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 104
    func_call   go to state 50


State 72

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   27     | expr OP_POWER . expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 105
    func_call   go to state 50


State 73

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   33     | expr OP_EQUALS . expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 106
    func_call   go to state 50


State 74

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   34     | expr OP_NOT_EQ . expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 107
    func_call   go to state 50


State 75

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   35     | expr OP_LS . expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 108
    func_call   go to state 50


State 76

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   37     | expr OP_LS_EQ . expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 109
    func_call   go to state 50


State 77

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   36     | expr OP_GRT . expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 110
    func_call   go to state 50


State 78

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   38     | expr OP_GRT_EQ . expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 111
    func_call   go to state 50


State 79

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   28     | expr '+' . expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 112
    func_call   go to state 50


State 80

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   29     | expr '-' . expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 113
    func_call   go to state 50


State 81

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   30     | expr '*' . expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 114
    func_call   go to state 50


State 82

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   31     | expr '/' . expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 115
    func_call   go to state 50


State 83

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   32     | expr '%' . expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 116
    func_call   go to state 50


State 84

    2 comp_IDENT: . '#' IDENTIFIER
   49 expr: expr '.' . comp_IDENT
   50     | expr '.' . comp_IDENT '[' expr ']'
   67 func_call: expr '.' . IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 117
    '#'         shift, and go to state 47

    comp_IDENT  go to state 118


State 85

   24 const: KW_CONST IDENTIFIER '=' expr ':' . data_type ';'
  108 data_type: . KW_BOOL
  109          | . KW_INT
  110          | . KW_SCALAR
  111          | . KW_STRING
  112          | . KW_VOID

    KW_INT     shift, and go to state 29
    KW_SCALAR  shift, and go to state 30
    KW_STRING  shift, and go to state 31
    KW_VOID    shift, and go to state 32
    KW_BOOL    shift, and go to state 33

    data_type  go to state 119


State 86

   74 parameters: IDENTIFIER '[' . ']' ':' data_type
   77           | IDENTIFIER '[' . ']' ':' data_type ',' parameters

    ']'  shift, and go to state 120


State 87

   72 parameters: IDENTIFIER ':' . data_type
   73           | IDENTIFIER ':' . IDENTIFIER
   75           | IDENTIFIER ':' . data_type ',' parameters
   76           | IDENTIFIER ':' . IDENTIFIER ',' parameters
  108 data_type: . KW_BOOL
  109          | . KW_INT
  110          | . KW_SCALAR
  111          | . KW_STRING
  112          | . KW_VOID

    IDENTIFIER  shift, and go to state 121
    KW_INT      shift, and go to state 29
    KW_SCALAR   shift, and go to state 30
    KW_STRING   shift, and go to state 31
    KW_VOID     shift, and go to state 32
    KW_BOOL     shift, and go to state 33

    data_type  go to state 122


State 88

   62 func_decl: KW_DEF IDENTIFIER '(' parameters ')' . '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   63          | KW_DEF IDENTIFIER '(' parameters ')' . '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   64          | KW_DEF IDENTIFIER '(' parameters ')' . ':' func_body KW_ENDDEF ';'
   65          | KW_DEF IDENTIFIER '(' parameters ')' . '-' OP_GRT IDENTIFIER ':' func_body KW_ENDDEF ';'

    '-'  shift, and go to state 123
    ':'  shift, and go to state 124


State 89

    2 comp_IDENT: . '#' IDENTIFIER
   18 ident: . IDENTIFIER
   19      | . IDENTIFIER '[' POSINT ']'
   20      | . IDENTIFIER '[' ']'
   21      | . IDENTIFIER ',' ident
   22      | . IDENTIFIER '[' POSINT ']' ',' ident
   23      | . IDENTIFIER '[' ']' ',' ident
   24 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   55 var: . ident ':' data_type ';'
   56    | . ident ':' IDENTIFIER ';'
   57 func_body: . %empty  [KW_ENDDEF]
   58          | . var func_body
   59          | . const func_body
   60          | . instr func_body
   61          | . if_stmt func_body
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   78 main_func: KW_DEF KW_MAIN '(' ')' ':' . func_body KW_ENDDEF ';'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 125
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    $default  reduce using rule 57 (func_body)

    comp_IDENT    go to state 48
    ident         go to state 9
    const         go to state 132
    expr          go to state 133
    var           go to state 134
    func_body     go to state 135
    func_call     go to state 136
    instr         go to state 137
    assign_instr  go to state 138
    if_stmt       go to state 139


State 90

    4 comp_ident: comp_IDENT '[' . POSINT ']'
    5           | comp_IDENT '[' . ']'
    7           | comp_IDENT '[' . POSINT ']' ',' comp_ident
    8           | comp_IDENT '[' . ']' ',' comp_ident

    POSINT  shift, and go to state 140
    ']'     shift, and go to state 141


State 91

    2 comp_IDENT: . '#' IDENTIFIER
    3 comp_ident: . comp_IDENT
    4           | . comp_IDENT '[' POSINT ']'
    5           | . comp_IDENT '[' ']'
    6           | . comp_IDENT ',' comp_ident
    6           | comp_IDENT ',' . comp_ident
    7           | . comp_IDENT '[' POSINT ']' ',' comp_ident
    8           | . comp_IDENT '[' ']' ',' comp_ident

    '#'  shift, and go to state 47

    comp_IDENT  go to state 54
    comp_ident  go to state 142


State 92

    9 comp_var: comp_ident ':' . data_type ';'
   10         | comp_ident ':' . IDENTIFIER ';'
  108 data_type: . KW_BOOL
  109          | . KW_INT
  110          | . KW_SCALAR
  111          | . KW_STRING
  112          | . KW_VOID

    IDENTIFIER  shift, and go to state 143
    KW_INT      shift, and go to state 29
    KW_SCALAR   shift, and go to state 30
    KW_STRING   shift, and go to state 31
    KW_VOID     shift, and go to state 32
    KW_BOOL     shift, and go to state 33

    data_type  go to state 144


State 93

   11 comp_func_decl: KW_DEF . IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   12               | KW_DEF . IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   13               | KW_DEF . IDENTIFIER '(' parameters ')' ':' func_body KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 145


State 94

   17 comp: KW_COMP IDENTIFIER ':' comp_body KW_ENDCOMP . ';'

    ';'  shift, and go to state 146


State 95

   15 comp_body: comp_body comp_var .

    $default  reduce using rule 15 (comp_body)


State 96

   16 comp_body: comp_body comp_func_decl .

    $default  reduce using rule 16 (comp_body)


State 97

   22 ident: IDENTIFIER '[' POSINT ']' ',' ident .

    $default  reduce using rule 22 (ident)


State 98

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'
   69 func_input: expr .  [')']
   70           | expr . ',' func_input

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    '.'        shift, and go to state 84
    ','        shift, and go to state 147

    $default  reduce using rule 69 (func_input)


State 99

   66 func_call: IDENTIFIER '(' func_input . ')'

    ')'  shift, and go to state 148


State 100

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   46     | IDENTIFIER '[' expr . ']'
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    ']'        shift, and go to state 149
    '.'        shift, and go to state 84


State 101

   42 expr: '(' expr ')' .

    $default  reduce using rule 42 (expr)


State 102

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   48     | comp_IDENT '[' expr . ']'
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    ']'        shift, and go to state 150
    '.'        shift, and go to state 84


State 103

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   40     | expr KW_AND expr .  [KW_AND, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, '=', ')', ']', ',', ':', ';']
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    '.'        shift, and go to state 84

    $default  reduce using rule 40 (expr)

    Conflict between rule 40 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 40 and token KW_OR resolved as shift (KW_AND < KW_OR).
    Conflict between rule 40 and token OP_POWER resolved as shift (KW_AND < OP_POWER).
    Conflict between rule 40 and token OP_EQUALS resolved as shift (KW_AND < OP_EQUALS).
    Conflict between rule 40 and token OP_NOT_EQ resolved as shift (KW_AND < OP_NOT_EQ).
    Conflict between rule 40 and token OP_LS resolved as shift (KW_AND < OP_LS).
    Conflict between rule 40 and token OP_LS_EQ resolved as shift (KW_AND < OP_LS_EQ).
    Conflict between rule 40 and token OP_GRT resolved as shift (KW_AND < OP_GRT).
    Conflict between rule 40 and token OP_GRT_EQ resolved as shift (KW_AND < OP_GRT_EQ).
    Conflict between rule 40 and token '+' resolved as shift (KW_AND < '+').
    Conflict between rule 40 and token '-' resolved as shift (KW_AND < '-').
    Conflict between rule 40 and token '*' resolved as shift (KW_AND < '*').
    Conflict between rule 40 and token '/' resolved as shift (KW_AND < '/').
    Conflict between rule 40 and token '%' resolved as shift (KW_AND < '%').
    Conflict between rule 40 and token '.' resolved as shift (KW_AND < '.').


State 104

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   41     | expr KW_OR expr .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, '=', ')', ']', ',', ':', ';']
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    '.'        shift, and go to state 84

    $default  reduce using rule 41 (expr)

    Conflict between rule 41 and token KW_AND resolved as reduce (KW_AND < KW_OR).
    Conflict between rule 41 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 41 and token OP_POWER resolved as shift (KW_OR < OP_POWER).
    Conflict between rule 41 and token OP_EQUALS resolved as shift (KW_OR < OP_EQUALS).
    Conflict between rule 41 and token OP_NOT_EQ resolved as shift (KW_OR < OP_NOT_EQ).
    Conflict between rule 41 and token OP_LS resolved as shift (KW_OR < OP_LS).
    Conflict between rule 41 and token OP_LS_EQ resolved as shift (KW_OR < OP_LS_EQ).
    Conflict between rule 41 and token OP_GRT resolved as shift (KW_OR < OP_GRT).
    Conflict between rule 41 and token OP_GRT_EQ resolved as shift (KW_OR < OP_GRT_EQ).
    Conflict between rule 41 and token '+' resolved as shift (KW_OR < '+').
    Conflict between rule 41 and token '-' resolved as shift (KW_OR < '-').
    Conflict between rule 41 and token '*' resolved as shift (KW_OR < '*').
    Conflict between rule 41 and token '/' resolved as shift (KW_OR < '/').
    Conflict between rule 41 and token '%' resolved as shift (KW_OR < '%').
    Conflict between rule 41 and token '.' resolved as shift (KW_OR < '.').


State 105

   27 expr: expr . OP_POWER expr
   27     | expr OP_POWER expr .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, '=', ')', ']', ',', ':', ';']
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    '.'        shift, and go to state 84

    $default  reduce using rule 27 (expr)

    Conflict between rule 27 and token KW_AND resolved as reduce (KW_AND < OP_POWER).
    Conflict between rule 27 and token KW_OR resolved as reduce (KW_OR < OP_POWER).
    Conflict between rule 27 and token OP_POWER resolved as shift (%right OP_POWER).
    Conflict between rule 27 and token OP_EQUALS resolved as shift (OP_POWER < OP_EQUALS).
    Conflict between rule 27 and token OP_NOT_EQ resolved as shift (OP_POWER < OP_NOT_EQ).
    Conflict between rule 27 and token OP_LS resolved as shift (OP_POWER < OP_LS).
    Conflict between rule 27 and token OP_LS_EQ resolved as shift (OP_POWER < OP_LS_EQ).
    Conflict between rule 27 and token OP_GRT resolved as shift (OP_POWER < OP_GRT).
    Conflict between rule 27 and token OP_GRT_EQ resolved as shift (OP_POWER < OP_GRT_EQ).
    Conflict between rule 27 and token '+' resolved as shift (OP_POWER < '+').
    Conflict between rule 27 and token '-' resolved as shift (OP_POWER < '-').
    Conflict between rule 27 and token '*' resolved as shift (OP_POWER < '*').
    Conflict between rule 27 and token '/' resolved as shift (OP_POWER < '/').
    Conflict between rule 27 and token '%' resolved as shift (OP_POWER < '%').
    Conflict between rule 27 and token '.' resolved as shift (OP_POWER < '.').


State 106

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   33     | expr OP_EQUALS expr .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '=', ')', ']', ',', ':', ';']
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    '%'  shift, and go to state 83
    '.'  shift, and go to state 84

    $default  reduce using rule 33 (expr)

    Conflict between rule 33 and token KW_AND resolved as reduce (KW_AND < OP_EQUALS).
    Conflict between rule 33 and token KW_OR resolved as reduce (KW_OR < OP_EQUALS).
    Conflict between rule 33 and token OP_POWER resolved as reduce (OP_POWER < OP_EQUALS).
    Conflict between rule 33 and token OP_EQUALS resolved as reduce (%left OP_EQUALS).
    Conflict between rule 33 and token OP_NOT_EQ resolved as reduce (%left OP_NOT_EQ).
    Conflict between rule 33 and token OP_LS resolved as reduce (%left OP_LS).
    Conflict between rule 33 and token OP_LS_EQ resolved as reduce (%left OP_LS_EQ).
    Conflict between rule 33 and token OP_GRT resolved as reduce (%left OP_GRT).
    Conflict between rule 33 and token OP_GRT_EQ resolved as reduce (%left OP_GRT_EQ).
    Conflict between rule 33 and token '+' resolved as shift (OP_EQUALS < '+').
    Conflict between rule 33 and token '-' resolved as shift (OP_EQUALS < '-').
    Conflict between rule 33 and token '*' resolved as shift (OP_EQUALS < '*').
    Conflict between rule 33 and token '/' resolved as shift (OP_EQUALS < '/').
    Conflict between rule 33 and token '%' resolved as shift (OP_EQUALS < '%').
    Conflict between rule 33 and token '.' resolved as shift (OP_EQUALS < '.').


State 107

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   34     | expr OP_NOT_EQ expr .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '=', ')', ']', ',', ':', ';']
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    '%'  shift, and go to state 83
    '.'  shift, and go to state 84

    $default  reduce using rule 34 (expr)

    Conflict between rule 34 and token KW_AND resolved as reduce (KW_AND < OP_NOT_EQ).
    Conflict between rule 34 and token KW_OR resolved as reduce (KW_OR < OP_NOT_EQ).
    Conflict between rule 34 and token OP_POWER resolved as reduce (OP_POWER < OP_NOT_EQ).
    Conflict between rule 34 and token OP_EQUALS resolved as reduce (%left OP_EQUALS).
    Conflict between rule 34 and token OP_NOT_EQ resolved as reduce (%left OP_NOT_EQ).
    Conflict between rule 34 and token OP_LS resolved as reduce (%left OP_LS).
    Conflict between rule 34 and token OP_LS_EQ resolved as reduce (%left OP_LS_EQ).
    Conflict between rule 34 and token OP_GRT resolved as reduce (%left OP_GRT).
    Conflict between rule 34 and token OP_GRT_EQ resolved as reduce (%left OP_GRT_EQ).
    Conflict between rule 34 and token '+' resolved as shift (OP_NOT_EQ < '+').
    Conflict between rule 34 and token '-' resolved as shift (OP_NOT_EQ < '-').
    Conflict between rule 34 and token '*' resolved as shift (OP_NOT_EQ < '*').
    Conflict between rule 34 and token '/' resolved as shift (OP_NOT_EQ < '/').
    Conflict between rule 34 and token '%' resolved as shift (OP_NOT_EQ < '%').
    Conflict between rule 34 and token '.' resolved as shift (OP_NOT_EQ < '.').


State 108

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   35     | expr OP_LS expr .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '=', ')', ']', ',', ':', ';']
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    '%'  shift, and go to state 83
    '.'  shift, and go to state 84

    $default  reduce using rule 35 (expr)

    Conflict between rule 35 and token KW_AND resolved as reduce (KW_AND < OP_LS).
    Conflict between rule 35 and token KW_OR resolved as reduce (KW_OR < OP_LS).
    Conflict between rule 35 and token OP_POWER resolved as reduce (OP_POWER < OP_LS).
    Conflict between rule 35 and token OP_EQUALS resolved as reduce (%left OP_EQUALS).
    Conflict between rule 35 and token OP_NOT_EQ resolved as reduce (%left OP_NOT_EQ).
    Conflict between rule 35 and token OP_LS resolved as reduce (%left OP_LS).
    Conflict between rule 35 and token OP_LS_EQ resolved as reduce (%left OP_LS_EQ).
    Conflict between rule 35 and token OP_GRT resolved as reduce (%left OP_GRT).
    Conflict between rule 35 and token OP_GRT_EQ resolved as reduce (%left OP_GRT_EQ).
    Conflict between rule 35 and token '+' resolved as shift (OP_LS < '+').
    Conflict between rule 35 and token '-' resolved as shift (OP_LS < '-').
    Conflict between rule 35 and token '*' resolved as shift (OP_LS < '*').
    Conflict between rule 35 and token '/' resolved as shift (OP_LS < '/').
    Conflict between rule 35 and token '%' resolved as shift (OP_LS < '%').
    Conflict between rule 35 and token '.' resolved as shift (OP_LS < '.').


State 109

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   37     | expr OP_LS_EQ expr .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '=', ')', ']', ',', ':', ';']
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    '%'  shift, and go to state 83
    '.'  shift, and go to state 84

    $default  reduce using rule 37 (expr)

    Conflict between rule 37 and token KW_AND resolved as reduce (KW_AND < OP_LS_EQ).
    Conflict between rule 37 and token KW_OR resolved as reduce (KW_OR < OP_LS_EQ).
    Conflict between rule 37 and token OP_POWER resolved as reduce (OP_POWER < OP_LS_EQ).
    Conflict between rule 37 and token OP_EQUALS resolved as reduce (%left OP_EQUALS).
    Conflict between rule 37 and token OP_NOT_EQ resolved as reduce (%left OP_NOT_EQ).
    Conflict between rule 37 and token OP_LS resolved as reduce (%left OP_LS).
    Conflict between rule 37 and token OP_LS_EQ resolved as reduce (%left OP_LS_EQ).
    Conflict between rule 37 and token OP_GRT resolved as reduce (%left OP_GRT).
    Conflict between rule 37 and token OP_GRT_EQ resolved as reduce (%left OP_GRT_EQ).
    Conflict between rule 37 and token '+' resolved as shift (OP_LS_EQ < '+').
    Conflict between rule 37 and token '-' resolved as shift (OP_LS_EQ < '-').
    Conflict between rule 37 and token '*' resolved as shift (OP_LS_EQ < '*').
    Conflict between rule 37 and token '/' resolved as shift (OP_LS_EQ < '/').
    Conflict between rule 37 and token '%' resolved as shift (OP_LS_EQ < '%').
    Conflict between rule 37 and token '.' resolved as shift (OP_LS_EQ < '.').


State 110

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   36     | expr OP_GRT expr .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '=', ')', ']', ',', ':', ';']
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    '%'  shift, and go to state 83
    '.'  shift, and go to state 84

    $default  reduce using rule 36 (expr)

    Conflict between rule 36 and token KW_AND resolved as reduce (KW_AND < OP_GRT).
    Conflict between rule 36 and token KW_OR resolved as reduce (KW_OR < OP_GRT).
    Conflict between rule 36 and token OP_POWER resolved as reduce (OP_POWER < OP_GRT).
    Conflict between rule 36 and token OP_EQUALS resolved as reduce (%left OP_EQUALS).
    Conflict between rule 36 and token OP_NOT_EQ resolved as reduce (%left OP_NOT_EQ).
    Conflict between rule 36 and token OP_LS resolved as reduce (%left OP_LS).
    Conflict between rule 36 and token OP_LS_EQ resolved as reduce (%left OP_LS_EQ).
    Conflict between rule 36 and token OP_GRT resolved as reduce (%left OP_GRT).
    Conflict between rule 36 and token OP_GRT_EQ resolved as reduce (%left OP_GRT_EQ).
    Conflict between rule 36 and token '+' resolved as shift (OP_GRT < '+').
    Conflict between rule 36 and token '-' resolved as shift (OP_GRT < '-').
    Conflict between rule 36 and token '*' resolved as shift (OP_GRT < '*').
    Conflict between rule 36 and token '/' resolved as shift (OP_GRT < '/').
    Conflict between rule 36 and token '%' resolved as shift (OP_GRT < '%').
    Conflict between rule 36 and token '.' resolved as shift (OP_GRT < '.').


State 111

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   38     | expr OP_GRT_EQ expr .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '=', ')', ']', ',', ':', ';']
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    '%'  shift, and go to state 83
    '.'  shift, and go to state 84

    $default  reduce using rule 38 (expr)

    Conflict between rule 38 and token KW_AND resolved as reduce (KW_AND < OP_GRT_EQ).
    Conflict between rule 38 and token KW_OR resolved as reduce (KW_OR < OP_GRT_EQ).
    Conflict between rule 38 and token OP_POWER resolved as reduce (OP_POWER < OP_GRT_EQ).
    Conflict between rule 38 and token OP_EQUALS resolved as reduce (%left OP_EQUALS).
    Conflict between rule 38 and token OP_NOT_EQ resolved as reduce (%left OP_NOT_EQ).
    Conflict between rule 38 and token OP_LS resolved as reduce (%left OP_LS).
    Conflict between rule 38 and token OP_LS_EQ resolved as reduce (%left OP_LS_EQ).
    Conflict between rule 38 and token OP_GRT resolved as reduce (%left OP_GRT).
    Conflict between rule 38 and token OP_GRT_EQ resolved as reduce (%left OP_GRT_EQ).
    Conflict between rule 38 and token '+' resolved as shift (OP_GRT_EQ < '+').
    Conflict between rule 38 and token '-' resolved as shift (OP_GRT_EQ < '-').
    Conflict between rule 38 and token '*' resolved as shift (OP_GRT_EQ < '*').
    Conflict between rule 38 and token '/' resolved as shift (OP_GRT_EQ < '/').
    Conflict between rule 38 and token '%' resolved as shift (OP_GRT_EQ < '%').
    Conflict between rule 38 and token '.' resolved as shift (OP_GRT_EQ < '.').


State 112

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   28     | expr '+' expr .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '=', '+', '-', ')', ']', ',', ':', ';']
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    '%'  shift, and go to state 83
    '.'  shift, and go to state 84

    $default  reduce using rule 28 (expr)

    Conflict between rule 28 and token KW_AND resolved as reduce (KW_AND < '+').
    Conflict between rule 28 and token KW_OR resolved as reduce (KW_OR < '+').
    Conflict between rule 28 and token OP_POWER resolved as reduce (OP_POWER < '+').
    Conflict between rule 28 and token OP_EQUALS resolved as reduce (OP_EQUALS < '+').
    Conflict between rule 28 and token OP_NOT_EQ resolved as reduce (OP_NOT_EQ < '+').
    Conflict between rule 28 and token OP_LS resolved as reduce (OP_LS < '+').
    Conflict between rule 28 and token OP_LS_EQ resolved as reduce (OP_LS_EQ < '+').
    Conflict between rule 28 and token OP_GRT resolved as reduce (OP_GRT < '+').
    Conflict between rule 28 and token OP_GRT_EQ resolved as reduce (OP_GRT_EQ < '+').
    Conflict between rule 28 and token '+' resolved as reduce (%left '+').
    Conflict between rule 28 and token '-' resolved as reduce (%left '-').
    Conflict between rule 28 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 28 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 28 and token '%' resolved as shift ('+' < '%').
    Conflict between rule 28 and token '.' resolved as shift ('+' < '.').


State 113

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   29     | expr '-' expr .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '=', '+', '-', ')', ']', ',', ':', ';']
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    '%'  shift, and go to state 83
    '.'  shift, and go to state 84

    $default  reduce using rule 29 (expr)

    Conflict between rule 29 and token KW_AND resolved as reduce (KW_AND < '-').
    Conflict between rule 29 and token KW_OR resolved as reduce (KW_OR < '-').
    Conflict between rule 29 and token OP_POWER resolved as reduce (OP_POWER < '-').
    Conflict between rule 29 and token OP_EQUALS resolved as reduce (OP_EQUALS < '-').
    Conflict between rule 29 and token OP_NOT_EQ resolved as reduce (OP_NOT_EQ < '-').
    Conflict between rule 29 and token OP_LS resolved as reduce (OP_LS < '-').
    Conflict between rule 29 and token OP_LS_EQ resolved as reduce (OP_LS_EQ < '-').
    Conflict between rule 29 and token OP_GRT resolved as reduce (OP_GRT < '-').
    Conflict between rule 29 and token OP_GRT_EQ resolved as reduce (OP_GRT_EQ < '-').
    Conflict between rule 29 and token '+' resolved as reduce (%left '+').
    Conflict between rule 29 and token '-' resolved as reduce (%left '-').
    Conflict between rule 29 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 29 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 29 and token '%' resolved as shift ('-' < '%').
    Conflict between rule 29 and token '.' resolved as shift ('-' < '.').


State 114

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   30     | expr '*' expr .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '=', '+', '-', '*', '/', '%', ')', ']', ',', ':', ';']
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    '.'  shift, and go to state 84

    $default  reduce using rule 30 (expr)

    Conflict between rule 30 and token KW_AND resolved as reduce (KW_AND < '*').
    Conflict between rule 30 and token KW_OR resolved as reduce (KW_OR < '*').
    Conflict between rule 30 and token OP_POWER resolved as reduce (OP_POWER < '*').
    Conflict between rule 30 and token OP_EQUALS resolved as reduce (OP_EQUALS < '*').
    Conflict between rule 30 and token OP_NOT_EQ resolved as reduce (OP_NOT_EQ < '*').
    Conflict between rule 30 and token OP_LS resolved as reduce (OP_LS < '*').
    Conflict between rule 30 and token OP_LS_EQ resolved as reduce (OP_LS_EQ < '*').
    Conflict between rule 30 and token OP_GRT resolved as reduce (OP_GRT < '*').
    Conflict between rule 30 and token OP_GRT_EQ resolved as reduce (OP_GRT_EQ < '*').
    Conflict between rule 30 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 30 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 30 and token '*' resolved as reduce (%left '*').
    Conflict between rule 30 and token '/' resolved as reduce (%left '/').
    Conflict between rule 30 and token '%' resolved as reduce (%left '%').
    Conflict between rule 30 and token '.' resolved as shift ('*' < '.').


State 115

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   31     | expr '/' expr .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '=', '+', '-', '*', '/', '%', ')', ']', ',', ':', ';']
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    '.'  shift, and go to state 84

    $default  reduce using rule 31 (expr)

    Conflict between rule 31 and token KW_AND resolved as reduce (KW_AND < '/').
    Conflict between rule 31 and token KW_OR resolved as reduce (KW_OR < '/').
    Conflict between rule 31 and token OP_POWER resolved as reduce (OP_POWER < '/').
    Conflict between rule 31 and token OP_EQUALS resolved as reduce (OP_EQUALS < '/').
    Conflict between rule 31 and token OP_NOT_EQ resolved as reduce (OP_NOT_EQ < '/').
    Conflict between rule 31 and token OP_LS resolved as reduce (OP_LS < '/').
    Conflict between rule 31 and token OP_LS_EQ resolved as reduce (OP_LS_EQ < '/').
    Conflict between rule 31 and token OP_GRT resolved as reduce (OP_GRT < '/').
    Conflict between rule 31 and token OP_GRT_EQ resolved as reduce (OP_GRT_EQ < '/').
    Conflict between rule 31 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 31 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 31 and token '*' resolved as reduce (%left '*').
    Conflict between rule 31 and token '/' resolved as reduce (%left '/').
    Conflict between rule 31 and token '%' resolved as reduce (%left '%').
    Conflict between rule 31 and token '.' resolved as shift ('/' < '.').


State 116

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   32     | expr '%' expr .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '=', '+', '-', '*', '/', '%', ')', ']', ',', ':', ';']
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    '.'  shift, and go to state 84

    $default  reduce using rule 32 (expr)

    Conflict between rule 32 and token KW_AND resolved as reduce (KW_AND < '%').
    Conflict between rule 32 and token KW_OR resolved as reduce (KW_OR < '%').
    Conflict between rule 32 and token OP_POWER resolved as reduce (OP_POWER < '%').
    Conflict between rule 32 and token OP_EQUALS resolved as reduce (OP_EQUALS < '%').
    Conflict between rule 32 and token OP_NOT_EQ resolved as reduce (OP_NOT_EQ < '%').
    Conflict between rule 32 and token OP_LS resolved as reduce (OP_LS < '%').
    Conflict between rule 32 and token OP_LS_EQ resolved as reduce (OP_LS_EQ < '%').
    Conflict between rule 32 and token OP_GRT resolved as reduce (OP_GRT < '%').
    Conflict between rule 32 and token OP_GRT_EQ resolved as reduce (OP_GRT_EQ < '%').
    Conflict between rule 32 and token '+' resolved as reduce ('+' < '%').
    Conflict between rule 32 and token '-' resolved as reduce ('-' < '%').
    Conflict between rule 32 and token '*' resolved as reduce (%left '*').
    Conflict between rule 32 and token '/' resolved as reduce (%left '/').
    Conflict between rule 32 and token '%' resolved as reduce (%left '%').
    Conflict between rule 32 and token '.' resolved as shift ('%' < '.').


State 117

   67 func_call: expr '.' IDENTIFIER . '(' func_input ')'

    '('  shift, and go to state 151


State 118

   49 expr: expr '.' comp_IDENT .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '=', '+', '-', '*', '/', '%', ')', ']', '.', ',', ':', ';']
   50     | expr '.' comp_IDENT . '[' expr ']'

    '['  shift, and go to state 152

    $default  reduce using rule 49 (expr)


State 119

   24 const: KW_CONST IDENTIFIER '=' expr ':' data_type . ';'

    ';'  shift, and go to state 153


State 120

   74 parameters: IDENTIFIER '[' ']' . ':' data_type
   77           | IDENTIFIER '[' ']' . ':' data_type ',' parameters

    ':'  shift, and go to state 154


State 121

   73 parameters: IDENTIFIER ':' IDENTIFIER .  [')']
   76           | IDENTIFIER ':' IDENTIFIER . ',' parameters

    ','  shift, and go to state 155

    $default  reduce using rule 73 (parameters)


State 122

   72 parameters: IDENTIFIER ':' data_type .  [')']
   75           | IDENTIFIER ':' data_type . ',' parameters

    ','  shift, and go to state 156

    $default  reduce using rule 72 (parameters)


State 123

   62 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' . OP_GRT data_type ':' func_body KW_ENDDEF ';'
   63          | KW_DEF IDENTIFIER '(' parameters ')' '-' . OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   65          | KW_DEF IDENTIFIER '(' parameters ')' '-' . OP_GRT IDENTIFIER ':' func_body KW_ENDDEF ';'

    OP_GRT  shift, and go to state 157


State 124

    2 comp_IDENT: . '#' IDENTIFIER
   18 ident: . IDENTIFIER
   19      | . IDENTIFIER '[' POSINT ']'
   20      | . IDENTIFIER '[' ']'
   21      | . IDENTIFIER ',' ident
   22      | . IDENTIFIER '[' POSINT ']' ',' ident
   23      | . IDENTIFIER '[' ']' ',' ident
   24 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   55 var: . ident ':' data_type ';'
   56    | . ident ':' IDENTIFIER ';'
   57 func_body: . %empty  [KW_ENDDEF]
   58          | . var func_body
   59          | . const func_body
   60          | . instr func_body
   61          | . if_stmt func_body
   64 func_decl: KW_DEF IDENTIFIER '(' parameters ')' ':' . func_body KW_ENDDEF ';'
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 125
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    $default  reduce using rule 57 (func_body)

    comp_IDENT    go to state 48
    ident         go to state 9
    const         go to state 132
    expr          go to state 133
    var           go to state 134
    func_body     go to state 158
    func_call     go to state 136
    instr         go to state 137
    assign_instr  go to state 138
    if_stmt       go to state 139


State 125

   18 ident: IDENTIFIER .  [':']
   19      | IDENTIFIER . '[' POSINT ']'
   20      | IDENTIFIER . '[' ']'
   21      | IDENTIFIER . ',' ident
   22      | IDENTIFIER . '[' POSINT ']' ',' ident
   23      | IDENTIFIER . '[' ']' ',' ident
   46 expr: IDENTIFIER . '[' expr ']'
   51     | IDENTIFIER .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '=', '+', '-', '*', '/', '%', '.']
   66 func_call: IDENTIFIER . '(' func_input ')'

    '('  shift, and go to state 62
    '['  shift, and go to state 159
    ','  shift, and go to state 15

    ':'       reduce using rule 18 (ident)
    $default  reduce using rule 51 (expr)


State 126

  106 if_stmt: KW_IF . '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | KW_IF . '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    '('  shift, and go to state 160


State 127

    2 comp_IDENT: . '#' IDENTIFIER
   86 instr: KW_FOR . IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | KW_FOR . IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | KW_FOR . comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | KW_FOR . comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 161
    '#'         shift, and go to state 47

    comp_IDENT  go to state 162


State 128

   90 instr: KW_WHILE . '(' expr ')' ':' stmts KW_ENDWHILE ';'

    '('  shift, and go to state 163


State 129

   91 instr: KW_BREAK . ';'

    ';'  shift, and go to state 164


State 130

   92 instr: KW_CONTINUE . ';'

    ';'  shift, and go to state 165


State 131

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   93 instr: KW_RETURN . ';'
   94      | KW_RETURN . expr ';'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47
    ';'         shift, and go to state 166

    comp_IDENT  go to state 48
    expr        go to state 167
    func_call   go to state 50


State 132

    2 comp_IDENT: . '#' IDENTIFIER
   18 ident: . IDENTIFIER
   19      | . IDENTIFIER '[' POSINT ']'
   20      | . IDENTIFIER '[' ']'
   21      | . IDENTIFIER ',' ident
   22      | . IDENTIFIER '[' POSINT ']' ',' ident
   23      | . IDENTIFIER '[' ']' ',' ident
   24 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   55 var: . ident ':' data_type ';'
   56    | . ident ':' IDENTIFIER ';'
   57 func_body: . %empty  [KW_ENDDEF]
   58          | . var func_body
   59          | . const func_body
   59          | const . func_body
   60          | . instr func_body
   61          | . if_stmt func_body
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 125
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    $default  reduce using rule 57 (func_body)

    comp_IDENT    go to state 48
    ident         go to state 9
    const         go to state 132
    expr          go to state 133
    var           go to state 134
    func_body     go to state 168
    func_call     go to state 136
    instr         go to state 137
    assign_instr  go to state 138
    if_stmt       go to state 139


State 133

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'
   96 assign_instr: expr . '=' expr
   97             | expr . OP_ASGN_ADD expr
   98             | expr . OP_ASGN_SUB expr
   99             | expr . OP_ASGN_MUL expr
  100             | expr . OP_ASGN_DIV expr
  101             | expr . OP_ASGN_MOD expr

    KW_AND       shift, and go to state 70
    KW_OR        shift, and go to state 71
    OP_ASGN_ADD  shift, and go to state 169
    OP_ASGN_SUB  shift, and go to state 170
    OP_ASGN_MUL  shift, and go to state 171
    OP_ASGN_DIV  shift, and go to state 172
    OP_ASGN_MOD  shift, and go to state 173
    OP_POWER     shift, and go to state 72
    OP_EQUALS    shift, and go to state 73
    OP_NOT_EQ    shift, and go to state 74
    OP_LS        shift, and go to state 75
    OP_LS_EQ     shift, and go to state 76
    OP_GRT       shift, and go to state 77
    OP_GRT_EQ    shift, and go to state 78
    '='          shift, and go to state 174
    '+'          shift, and go to state 79
    '-'          shift, and go to state 80
    '*'          shift, and go to state 81
    '/'          shift, and go to state 82
    '%'          shift, and go to state 83
    '.'          shift, and go to state 84


State 134

    2 comp_IDENT: . '#' IDENTIFIER
   18 ident: . IDENTIFIER
   19      | . IDENTIFIER '[' POSINT ']'
   20      | . IDENTIFIER '[' ']'
   21      | . IDENTIFIER ',' ident
   22      | . IDENTIFIER '[' POSINT ']' ',' ident
   23      | . IDENTIFIER '[' ']' ',' ident
   24 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   55 var: . ident ':' data_type ';'
   56    | . ident ':' IDENTIFIER ';'
   57 func_body: . %empty  [KW_ENDDEF]
   58          | . var func_body
   58          | var . func_body
   59          | . const func_body
   60          | . instr func_body
   61          | . if_stmt func_body
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 125
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    $default  reduce using rule 57 (func_body)

    comp_IDENT    go to state 48
    ident         go to state 9
    const         go to state 132
    expr          go to state 133
    var           go to state 134
    func_body     go to state 175
    func_call     go to state 136
    instr         go to state 137
    assign_instr  go to state 138
    if_stmt       go to state 139


State 135

   78 main_func: KW_DEF KW_MAIN '(' ')' ':' func_body . KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 176


State 136

   43 expr: func_call .  [KW_AND, KW_OR, OP_ASGN_ADD, OP_ASGN_SUB, OP_ASGN_MUL, OP_ASGN_DIV, OP_ASGN_MOD, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '=', '+', '-', '*', '/', '%', '.']
   95 instr: func_call . ';'

    ';'  shift, and go to state 177

    $default  reduce using rule 43 (expr)


State 137

    2 comp_IDENT: . '#' IDENTIFIER
   18 ident: . IDENTIFIER
   19      | . IDENTIFIER '[' POSINT ']'
   20      | . IDENTIFIER '[' ']'
   21      | . IDENTIFIER ',' ident
   22      | . IDENTIFIER '[' POSINT ']' ',' ident
   23      | . IDENTIFIER '[' ']' ',' ident
   24 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   55 var: . ident ':' data_type ';'
   56    | . ident ':' IDENTIFIER ';'
   57 func_body: . %empty  [KW_ENDDEF]
   58          | . var func_body
   59          | . const func_body
   60          | . instr func_body
   60          | instr . func_body
   61          | . if_stmt func_body
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 125
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    $default  reduce using rule 57 (func_body)

    comp_IDENT    go to state 48
    ident         go to state 9
    const         go to state 132
    expr          go to state 133
    var           go to state 134
    func_body     go to state 178
    func_call     go to state 136
    instr         go to state 137
    assign_instr  go to state 138
    if_stmt       go to state 139


State 138

   85 instr: assign_instr . ';'

    ';'  shift, and go to state 179


State 139

    2 comp_IDENT: . '#' IDENTIFIER
   18 ident: . IDENTIFIER
   19      | . IDENTIFIER '[' POSINT ']'
   20      | . IDENTIFIER '[' ']'
   21      | . IDENTIFIER ',' ident
   22      | . IDENTIFIER '[' POSINT ']' ',' ident
   23      | . IDENTIFIER '[' ']' ',' ident
   24 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   55 var: . ident ':' data_type ';'
   56    | . ident ':' IDENTIFIER ';'
   57 func_body: . %empty  [KW_ENDDEF]
   58          | . var func_body
   59          | . const func_body
   60          | . instr func_body
   61          | . if_stmt func_body
   61          | if_stmt . func_body
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 125
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    $default  reduce using rule 57 (func_body)

    comp_IDENT    go to state 48
    ident         go to state 9
    const         go to state 132
    expr          go to state 133
    var           go to state 134
    func_body     go to state 180
    func_call     go to state 136
    instr         go to state 137
    assign_instr  go to state 138
    if_stmt       go to state 139


State 140

    4 comp_ident: comp_IDENT '[' POSINT . ']'
    7           | comp_IDENT '[' POSINT . ']' ',' comp_ident

    ']'  shift, and go to state 181


State 141

    5 comp_ident: comp_IDENT '[' ']' .  [':']
    8           | comp_IDENT '[' ']' . ',' comp_ident

    ','  shift, and go to state 182

    $default  reduce using rule 5 (comp_ident)


State 142

    6 comp_ident: comp_IDENT ',' comp_ident .

    $default  reduce using rule 6 (comp_ident)


State 143

   10 comp_var: comp_ident ':' IDENTIFIER . ';'

    ';'  shift, and go to state 183


State 144

    9 comp_var: comp_ident ':' data_type . ';'

    ';'  shift, and go to state 184


State 145

   11 comp_func_decl: KW_DEF IDENTIFIER . '(' parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   12               | KW_DEF IDENTIFIER . '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   13               | KW_DEF IDENTIFIER . '(' parameters ')' ':' func_body KW_ENDDEF ';'

    '('  shift, and go to state 185


State 146

   17 comp: KW_COMP IDENTIFIER ':' comp_body KW_ENDCOMP ';' .

    $default  reduce using rule 17 (comp)


State 147

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   68 func_input: . %empty  [')']
   69           | . expr
   70           | . expr ',' func_input
   70           | expr ',' . func_input

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    $default  reduce using rule 68 (func_input)

    comp_IDENT  go to state 48
    expr        go to state 98
    func_call   go to state 50
    func_input  go to state 186


State 148

   66 func_call: IDENTIFIER '(' func_input ')' .

    $default  reduce using rule 66 (func_call)


State 149

   46 expr: IDENTIFIER '[' expr ']' .

    $default  reduce using rule 46 (expr)


State 150

   48 expr: comp_IDENT '[' expr ']' .

    $default  reduce using rule 48 (expr)


State 151

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   67          | expr '.' IDENTIFIER '(' . func_input ')'
   68 func_input: . %empty  [')']
   69           | . expr
   70           | . expr ',' func_input

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    $default  reduce using rule 68 (func_input)

    comp_IDENT  go to state 48
    expr        go to state 98
    func_call   go to state 50
    func_input  go to state 187


State 152

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   50     | expr '.' comp_IDENT '[' . expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 188
    func_call   go to state 50


State 153

   24 const: KW_CONST IDENTIFIER '=' expr ':' data_type ';' .

    $default  reduce using rule 24 (const)


State 154

   74 parameters: IDENTIFIER '[' ']' ':' . data_type
   77           | IDENTIFIER '[' ']' ':' . data_type ',' parameters
  108 data_type: . KW_BOOL
  109          | . KW_INT
  110          | . KW_SCALAR
  111          | . KW_STRING
  112          | . KW_VOID

    KW_INT     shift, and go to state 29
    KW_SCALAR  shift, and go to state 30
    KW_STRING  shift, and go to state 31
    KW_VOID    shift, and go to state 32
    KW_BOOL    shift, and go to state 33

    data_type  go to state 189


State 155

   71 parameters: . %empty  [')']
   72           | . IDENTIFIER ':' data_type
   73           | . IDENTIFIER ':' IDENTIFIER
   74           | . IDENTIFIER '[' ']' ':' data_type
   75           | . IDENTIFIER ':' data_type ',' parameters
   76           | . IDENTIFIER ':' IDENTIFIER ',' parameters
   76           | IDENTIFIER ':' IDENTIFIER ',' . parameters
   77           | . IDENTIFIER '[' ']' ':' data_type ',' parameters

    IDENTIFIER  shift, and go to state 51

    $default  reduce using rule 71 (parameters)

    parameters  go to state 190


State 156

   71 parameters: . %empty  [')']
   72           | . IDENTIFIER ':' data_type
   73           | . IDENTIFIER ':' IDENTIFIER
   74           | . IDENTIFIER '[' ']' ':' data_type
   75           | . IDENTIFIER ':' data_type ',' parameters
   75           | IDENTIFIER ':' data_type ',' . parameters
   76           | . IDENTIFIER ':' IDENTIFIER ',' parameters
   77           | . IDENTIFIER '[' ']' ':' data_type ',' parameters

    IDENTIFIER  shift, and go to state 51

    $default  reduce using rule 71 (parameters)

    parameters  go to state 191


State 157

   62 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT . data_type ':' func_body KW_ENDDEF ';'
   63          | KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT . '[' ']' data_type ':' func_body KW_ENDDEF ';'
   65          | KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT . IDENTIFIER ':' func_body KW_ENDDEF ';'
  108 data_type: . KW_BOOL
  109          | . KW_INT
  110          | . KW_SCALAR
  111          | . KW_STRING
  112          | . KW_VOID

    IDENTIFIER  shift, and go to state 192
    KW_INT      shift, and go to state 29
    KW_SCALAR   shift, and go to state 30
    KW_STRING   shift, and go to state 31
    KW_VOID     shift, and go to state 32
    KW_BOOL     shift, and go to state 33
    '['         shift, and go to state 193

    data_type  go to state 194


State 158

   64 func_decl: KW_DEF IDENTIFIER '(' parameters ')' ':' func_body . KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 195


State 159

    2 comp_IDENT: . '#' IDENTIFIER
   19 ident: IDENTIFIER '[' . POSINT ']'
   20      | IDENTIFIER '[' . ']'
   22      | IDENTIFIER '[' . POSINT ']' ',' ident
   23      | IDENTIFIER '[' . ']' ',' ident
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   46     | IDENTIFIER '[' . expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 196
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    ']'         shift, and go to state 22
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 100
    func_call   go to state 50


State 160

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
  106 if_stmt: KW_IF '(' . expr ')' ':' stmts KW_ENDIF ';'
  107        | KW_IF '(' . expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 197
    func_call   go to state 50


State 161

   86 instr: KW_FOR IDENTIFIER . KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | KW_FOR IDENTIFIER . KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'

    KW_IN  shift, and go to state 198


State 162

   88 instr: KW_FOR comp_IDENT . KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | KW_FOR comp_IDENT . KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'

    KW_IN  shift, and go to state 199


State 163

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   90 instr: KW_WHILE '(' . expr ')' ':' stmts KW_ENDWHILE ';'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 200
    func_call   go to state 50


State 164

   91 instr: KW_BREAK ';' .

    $default  reduce using rule 91 (instr)


State 165

   92 instr: KW_CONTINUE ';' .

    $default  reduce using rule 92 (instr)


State 166

   93 instr: KW_RETURN ';' .

    $default  reduce using rule 93 (instr)


State 167

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'
   94 instr: KW_RETURN expr . ';'

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    '.'        shift, and go to state 84
    ';'        shift, and go to state 201


State 168

   59 func_body: const func_body .

    $default  reduce using rule 59 (func_body)


State 169

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   97 assign_instr: expr OP_ASGN_ADD . expr

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 202
    func_call   go to state 50


State 170

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   98 assign_instr: expr OP_ASGN_SUB . expr

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 203
    func_call   go to state 50


State 171

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   99 assign_instr: expr OP_ASGN_MUL . expr

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 204
    func_call   go to state 50


State 172

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
  100 assign_instr: expr OP_ASGN_DIV . expr

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 205
    func_call   go to state 50


State 173

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
  101 assign_instr: expr OP_ASGN_MOD . expr

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 206
    func_call   go to state 50


State 174

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   96 assign_instr: expr '=' . expr

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 207
    func_call   go to state 50


State 175

   58 func_body: var func_body .

    $default  reduce using rule 58 (func_body)


State 176

   78 main_func: KW_DEF KW_MAIN '(' ')' ':' func_body KW_ENDDEF . ';'

    ';'  shift, and go to state 208


State 177

   95 instr: func_call ';' .

    $default  reduce using rule 95 (instr)


State 178

   60 func_body: instr func_body .

    $default  reduce using rule 60 (func_body)


State 179

   85 instr: assign_instr ';' .

    $default  reduce using rule 85 (instr)


State 180

   61 func_body: if_stmt func_body .

    $default  reduce using rule 61 (func_body)


State 181

    4 comp_ident: comp_IDENT '[' POSINT ']' .  [':']
    7           | comp_IDENT '[' POSINT ']' . ',' comp_ident

    ','  shift, and go to state 209

    $default  reduce using rule 4 (comp_ident)


State 182

    2 comp_IDENT: . '#' IDENTIFIER
    3 comp_ident: . comp_IDENT
    4           | . comp_IDENT '[' POSINT ']'
    5           | . comp_IDENT '[' ']'
    6           | . comp_IDENT ',' comp_ident
    7           | . comp_IDENT '[' POSINT ']' ',' comp_ident
    8           | . comp_IDENT '[' ']' ',' comp_ident
    8           | comp_IDENT '[' ']' ',' . comp_ident

    '#'  shift, and go to state 47

    comp_IDENT  go to state 54
    comp_ident  go to state 210


State 183

   10 comp_var: comp_ident ':' IDENTIFIER ';' .

    $default  reduce using rule 10 (comp_var)


State 184

    9 comp_var: comp_ident ':' data_type ';' .

    $default  reduce using rule 9 (comp_var)


State 185

   11 comp_func_decl: KW_DEF IDENTIFIER '(' . parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   12               | KW_DEF IDENTIFIER '(' . parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   13               | KW_DEF IDENTIFIER '(' . parameters ')' ':' func_body KW_ENDDEF ';'
   71 parameters: . %empty  [')']
   72           | . IDENTIFIER ':' data_type
   73           | . IDENTIFIER ':' IDENTIFIER
   74           | . IDENTIFIER '[' ']' ':' data_type
   75           | . IDENTIFIER ':' data_type ',' parameters
   76           | . IDENTIFIER ':' IDENTIFIER ',' parameters
   77           | . IDENTIFIER '[' ']' ':' data_type ',' parameters

    IDENTIFIER  shift, and go to state 51

    $default  reduce using rule 71 (parameters)

    parameters  go to state 211


State 186

   70 func_input: expr ',' func_input .

    $default  reduce using rule 70 (func_input)


State 187

   67 func_call: expr '.' IDENTIFIER '(' func_input . ')'

    ')'  shift, and go to state 212


State 188

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   50     | expr '.' comp_IDENT '[' expr . ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    ']'        shift, and go to state 213
    '.'        shift, and go to state 84


State 189

   74 parameters: IDENTIFIER '[' ']' ':' data_type .  [')']
   77           | IDENTIFIER '[' ']' ':' data_type . ',' parameters

    ','  shift, and go to state 214

    $default  reduce using rule 74 (parameters)


State 190

   76 parameters: IDENTIFIER ':' IDENTIFIER ',' parameters .

    $default  reduce using rule 76 (parameters)


State 191

   75 parameters: IDENTIFIER ':' data_type ',' parameters .

    $default  reduce using rule 75 (parameters)


State 192

   65 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT IDENTIFIER . ':' func_body KW_ENDDEF ';'

    ':'  shift, and go to state 215


State 193

   63 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' . ']' data_type ':' func_body KW_ENDDEF ';'

    ']'  shift, and go to state 216


State 194

   62 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type . ':' func_body KW_ENDDEF ';'

    ':'  shift, and go to state 217


State 195

   64 func_decl: KW_DEF IDENTIFIER '(' parameters ')' ':' func_body KW_ENDDEF . ';'

    ';'  shift, and go to state 218


State 196

   19 ident: IDENTIFIER '[' POSINT . ']'
   22      | IDENTIFIER '[' POSINT . ']' ',' ident
   54 expr: POSINT .  [KW_AND, KW_OR, OP_POWER, OP_EQUALS, OP_NOT_EQ, OP_LS, OP_LS_EQ, OP_GRT, OP_GRT_EQ, '+', '-', '*', '/', '%', '.']

    ']'  shift, and go to state 35

    $default  reduce using rule 54 (expr)

    Conflict between rule 54 and token ']' resolved as shift (POSINT < ']').


State 197

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'
  106 if_stmt: KW_IF '(' expr . ')' ':' stmts KW_ENDIF ';'
  107        | KW_IF '(' expr . ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    ')'        shift, and go to state 219
    '.'        shift, and go to state 84


State 198

   86 instr: KW_FOR IDENTIFIER KW_IN . '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | KW_FOR IDENTIFIER KW_IN . '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'

    '['  shift, and go to state 220


State 199

   88 instr: KW_FOR comp_IDENT KW_IN . '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | KW_FOR comp_IDENT KW_IN . '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'

    '['  shift, and go to state 221


State 200

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'
   90 instr: KW_WHILE '(' expr . ')' ':' stmts KW_ENDWHILE ';'

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    ')'        shift, and go to state 222
    '.'        shift, and go to state 84


State 201

   94 instr: KW_RETURN expr ';' .

    $default  reduce using rule 94 (instr)


State 202

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'
   97 assign_instr: expr OP_ASGN_ADD expr .  [';']

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    '.'        shift, and go to state 84

    $default  reduce using rule 97 (assign_instr)


State 203

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'
   98 assign_instr: expr OP_ASGN_SUB expr .  [';']

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    '.'        shift, and go to state 84

    $default  reduce using rule 98 (assign_instr)


State 204

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'
   99 assign_instr: expr OP_ASGN_MUL expr .  [';']

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    '.'        shift, and go to state 84

    $default  reduce using rule 99 (assign_instr)


State 205

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'
  100 assign_instr: expr OP_ASGN_DIV expr .  [';']

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    '.'        shift, and go to state 84

    $default  reduce using rule 100 (assign_instr)


State 206

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'
  101 assign_instr: expr OP_ASGN_MOD expr .  [';']

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    '.'        shift, and go to state 84

    $default  reduce using rule 101 (assign_instr)


State 207

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'
   96 assign_instr: expr '=' expr .  [';']

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    '.'        shift, and go to state 84

    $default  reduce using rule 96 (assign_instr)


State 208

   78 main_func: KW_DEF KW_MAIN '(' ')' ':' func_body KW_ENDDEF ';' .

    $default  reduce using rule 78 (main_func)


State 209

    2 comp_IDENT: . '#' IDENTIFIER
    3 comp_ident: . comp_IDENT
    4           | . comp_IDENT '[' POSINT ']'
    5           | . comp_IDENT '[' ']'
    6           | . comp_IDENT ',' comp_ident
    7           | . comp_IDENT '[' POSINT ']' ',' comp_ident
    7           | comp_IDENT '[' POSINT ']' ',' . comp_ident
    8           | . comp_IDENT '[' ']' ',' comp_ident

    '#'  shift, and go to state 47

    comp_IDENT  go to state 54
    comp_ident  go to state 223


State 210

    8 comp_ident: comp_IDENT '[' ']' ',' comp_ident .

    $default  reduce using rule 8 (comp_ident)


State 211

   11 comp_func_decl: KW_DEF IDENTIFIER '(' parameters . ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   12               | KW_DEF IDENTIFIER '(' parameters . ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   13               | KW_DEF IDENTIFIER '(' parameters . ')' ':' func_body KW_ENDDEF ';'

    ')'  shift, and go to state 224


State 212

   67 func_call: expr '.' IDENTIFIER '(' func_input ')' .

    $default  reduce using rule 67 (func_call)


State 213

   50 expr: expr '.' comp_IDENT '[' expr ']' .

    $default  reduce using rule 50 (expr)


State 214

   71 parameters: . %empty  [')']
   72           | . IDENTIFIER ':' data_type
   73           | . IDENTIFIER ':' IDENTIFIER
   74           | . IDENTIFIER '[' ']' ':' data_type
   75           | . IDENTIFIER ':' data_type ',' parameters
   76           | . IDENTIFIER ':' IDENTIFIER ',' parameters
   77           | . IDENTIFIER '[' ']' ':' data_type ',' parameters
   77           | IDENTIFIER '[' ']' ':' data_type ',' . parameters

    IDENTIFIER  shift, and go to state 51

    $default  reduce using rule 71 (parameters)

    parameters  go to state 225


State 215

    2 comp_IDENT: . '#' IDENTIFIER
   18 ident: . IDENTIFIER
   19      | . IDENTIFIER '[' POSINT ']'
   20      | . IDENTIFIER '[' ']'
   21      | . IDENTIFIER ',' ident
   22      | . IDENTIFIER '[' POSINT ']' ',' ident
   23      | . IDENTIFIER '[' ']' ',' ident
   24 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   55 var: . ident ':' data_type ';'
   56    | . ident ':' IDENTIFIER ';'
   57 func_body: . %empty  [KW_ENDDEF]
   58          | . var func_body
   59          | . const func_body
   60          | . instr func_body
   61          | . if_stmt func_body
   65 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT IDENTIFIER ':' . func_body KW_ENDDEF ';'
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 125
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    $default  reduce using rule 57 (func_body)

    comp_IDENT    go to state 48
    ident         go to state 9
    const         go to state 132
    expr          go to state 133
    var           go to state 134
    func_body     go to state 226
    func_call     go to state 136
    instr         go to state 137
    assign_instr  go to state 138
    if_stmt       go to state 139


State 216

   63 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' . data_type ':' func_body KW_ENDDEF ';'
  108 data_type: . KW_BOOL
  109          | . KW_INT
  110          | . KW_SCALAR
  111          | . KW_STRING
  112          | . KW_VOID

    KW_INT     shift, and go to state 29
    KW_SCALAR  shift, and go to state 30
    KW_STRING  shift, and go to state 31
    KW_VOID    shift, and go to state 32
    KW_BOOL    shift, and go to state 33

    data_type  go to state 227


State 217

    2 comp_IDENT: . '#' IDENTIFIER
   18 ident: . IDENTIFIER
   19      | . IDENTIFIER '[' POSINT ']'
   20      | . IDENTIFIER '[' ']'
   21      | . IDENTIFIER ',' ident
   22      | . IDENTIFIER '[' POSINT ']' ',' ident
   23      | . IDENTIFIER '[' ']' ',' ident
   24 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   55 var: . ident ':' data_type ';'
   56    | . ident ':' IDENTIFIER ';'
   57 func_body: . %empty  [KW_ENDDEF]
   58          | . var func_body
   59          | . const func_body
   60          | . instr func_body
   61          | . if_stmt func_body
   62 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' . func_body KW_ENDDEF ';'
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 125
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    $default  reduce using rule 57 (func_body)

    comp_IDENT    go to state 48
    ident         go to state 9
    const         go to state 132
    expr          go to state 133
    var           go to state 134
    func_body     go to state 228
    func_call     go to state 136
    instr         go to state 137
    assign_instr  go to state 138
    if_stmt       go to state 139


State 218

   64 func_decl: KW_DEF IDENTIFIER '(' parameters ')' ':' func_body KW_ENDDEF ';' .

    $default  reduce using rule 64 (func_decl)


State 219

  106 if_stmt: KW_IF '(' expr ')' . ':' stmts KW_ENDIF ';'
  107        | KW_IF '(' expr ')' . ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    ':'  shift, and go to state 229


State 220

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   86 instr: KW_FOR IDENTIFIER KW_IN '[' . expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | KW_FOR IDENTIFIER KW_IN '[' . expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 230
    func_call   go to state 50


State 221

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   88 instr: KW_FOR comp_IDENT KW_IN '[' . expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | KW_FOR comp_IDENT KW_IN '[' . expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 231
    func_call   go to state 50


State 222

   90 instr: KW_WHILE '(' expr ')' . ':' stmts KW_ENDWHILE ';'

    ':'  shift, and go to state 232


State 223

    7 comp_ident: comp_IDENT '[' POSINT ']' ',' comp_ident .

    $default  reduce using rule 7 (comp_ident)


State 224

   11 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' . '-' OP_GRT data_type ':' func_body KW_ENDDEF ';'
   12               | KW_DEF IDENTIFIER '(' parameters ')' . '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'
   13               | KW_DEF IDENTIFIER '(' parameters ')' . ':' func_body KW_ENDDEF ';'

    '-'  shift, and go to state 233
    ':'  shift, and go to state 234


State 225

   77 parameters: IDENTIFIER '[' ']' ':' data_type ',' parameters .

    $default  reduce using rule 77 (parameters)


State 226

   65 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT IDENTIFIER ':' func_body . KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 235


State 227

   63 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type . ':' func_body KW_ENDDEF ';'

    ':'  shift, and go to state 236


State 228

   62 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' func_body . KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 237


State 229

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  102 stmts: . instr
  103      | . instr stmts
  104      | . if_stmt
  105      | . if_stmt stmts
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  106        | KW_IF '(' expr ')' ':' . stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'
  107        | KW_IF '(' expr ')' ':' . stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 37
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    comp_IDENT    go to state 48
    expr          go to state 133
    func_call     go to state 136
    instr         go to state 238
    assign_instr  go to state 138
    stmts         go to state 239
    if_stmt       go to state 240


State 230

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'
   86 instr: KW_FOR IDENTIFIER KW_IN '[' expr . ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | KW_FOR IDENTIFIER KW_IN '[' expr . ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    '.'        shift, and go to state 84
    ':'        shift, and go to state 241


State 231

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'
   88 instr: KW_FOR comp_IDENT KW_IN '[' expr . ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | KW_FOR comp_IDENT KW_IN '[' expr . ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    '.'        shift, and go to state 84
    ':'        shift, and go to state 242


State 232

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   90      | KW_WHILE '(' expr ')' ':' . stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  102 stmts: . instr
  103      | . instr stmts
  104      | . if_stmt
  105      | . if_stmt stmts
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 37
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    comp_IDENT    go to state 48
    expr          go to state 133
    func_call     go to state 136
    instr         go to state 238
    assign_instr  go to state 138
    stmts         go to state 243
    if_stmt       go to state 240


State 233

   11 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' . OP_GRT data_type ':' func_body KW_ENDDEF ';'
   12               | KW_DEF IDENTIFIER '(' parameters ')' '-' . OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';'

    OP_GRT  shift, and go to state 244


State 234

    2 comp_IDENT: . '#' IDENTIFIER
   13 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' ':' . func_body KW_ENDDEF ';'
   18 ident: . IDENTIFIER
   19      | . IDENTIFIER '[' POSINT ']'
   20      | . IDENTIFIER '[' ']'
   21      | . IDENTIFIER ',' ident
   22      | . IDENTIFIER '[' POSINT ']' ',' ident
   23      | . IDENTIFIER '[' ']' ',' ident
   24 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   55 var: . ident ':' data_type ';'
   56    | . ident ':' IDENTIFIER ';'
   57 func_body: . %empty  [KW_ENDDEF]
   58          | . var func_body
   59          | . const func_body
   60          | . instr func_body
   61          | . if_stmt func_body
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 125
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    $default  reduce using rule 57 (func_body)

    comp_IDENT    go to state 48
    ident         go to state 9
    const         go to state 132
    expr          go to state 133
    var           go to state 134
    func_body     go to state 245
    func_call     go to state 136
    instr         go to state 137
    assign_instr  go to state 138
    if_stmt       go to state 139


State 235

   65 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT IDENTIFIER ':' func_body KW_ENDDEF . ';'

    ';'  shift, and go to state 246


State 236

    2 comp_IDENT: . '#' IDENTIFIER
   18 ident: . IDENTIFIER
   19      | . IDENTIFIER '[' POSINT ']'
   20      | . IDENTIFIER '[' ']'
   21      | . IDENTIFIER ',' ident
   22      | . IDENTIFIER '[' POSINT ']' ',' ident
   23      | . IDENTIFIER '[' ']' ',' ident
   24 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   55 var: . ident ':' data_type ';'
   56    | . ident ':' IDENTIFIER ';'
   57 func_body: . %empty  [KW_ENDDEF]
   58          | . var func_body
   59          | . const func_body
   60          | . instr func_body
   61          | . if_stmt func_body
   63 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' . func_body KW_ENDDEF ';'
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 125
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    $default  reduce using rule 57 (func_body)

    comp_IDENT    go to state 48
    ident         go to state 9
    const         go to state 132
    expr          go to state 133
    var           go to state 134
    func_body     go to state 247
    func_call     go to state 136
    instr         go to state 137
    assign_instr  go to state 138
    if_stmt       go to state 139


State 237

   62 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF . ';'

    ';'  shift, and go to state 248


State 238

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  102 stmts: . instr
  102      | instr .  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE]
  103      | . instr stmts
  103      | instr . stmts
  104      | . if_stmt
  105      | . if_stmt stmts
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 37
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    $default  reduce using rule 102 (stmts)

    comp_IDENT    go to state 48
    expr          go to state 133
    func_call     go to state 136
    instr         go to state 238
    assign_instr  go to state 138
    stmts         go to state 249
    if_stmt       go to state 240


State 239

  106 if_stmt: KW_IF '(' expr ')' ':' stmts . KW_ENDIF ';'
  107        | KW_IF '(' expr ')' ':' stmts . KW_ELSE ':' stmts KW_ENDIF ';'

    KW_ELSE   shift, and go to state 250
    KW_ENDIF  shift, and go to state 251


State 240

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  102 stmts: . instr
  103      | . instr stmts
  104      | . if_stmt
  104      | if_stmt .  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE]
  105      | . if_stmt stmts
  105      | if_stmt . stmts
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 37
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    $default  reduce using rule 104 (stmts)

    comp_IDENT    go to state 48
    expr          go to state 133
    func_call     go to state 136
    instr         go to state 238
    assign_instr  go to state 138
    stmts         go to state 252
    if_stmt       go to state 240


State 241

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   86 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' . expr ']' ':' stmts KW_ENDFOR ';'
   87      | KW_FOR IDENTIFIER KW_IN '[' expr ':' . expr ':' expr ']' ':' stmts KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 253
    func_call   go to state 50


State 242

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   88 instr: KW_FOR comp_IDENT KW_IN '[' expr ':' . expr ']' ':' stmts KW_ENDFOR ';'
   89      | KW_FOR comp_IDENT KW_IN '[' expr ':' . expr ':' expr ']' ':' stmts KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 254
    func_call   go to state 50


State 243

   90 instr: KW_WHILE '(' expr ')' ':' stmts . KW_ENDWHILE ';'

    KW_ENDWHILE  shift, and go to state 255


State 244

   11 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT . data_type ':' func_body KW_ENDDEF ';'
   12               | KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT . '[' ']' data_type ':' func_body KW_ENDDEF ';'
  108 data_type: . KW_BOOL
  109          | . KW_INT
  110          | . KW_SCALAR
  111          | . KW_STRING
  112          | . KW_VOID

    KW_INT     shift, and go to state 29
    KW_SCALAR  shift, and go to state 30
    KW_STRING  shift, and go to state 31
    KW_VOID    shift, and go to state 32
    KW_BOOL    shift, and go to state 33
    '['        shift, and go to state 256

    data_type  go to state 257


State 245

   13 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' ':' func_body . KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 258


State 246

   65 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT IDENTIFIER ':' func_body KW_ENDDEF ';' .

    $default  reduce using rule 65 (func_decl)


State 247

   63 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body . KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 259


State 248

   62 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';' .

    $default  reduce using rule 62 (func_decl)


State 249

  103 stmts: instr stmts .

    $default  reduce using rule 103 (stmts)


State 250

  107 if_stmt: KW_IF '(' expr ')' ':' stmts KW_ELSE . ':' stmts KW_ENDIF ';'

    ':'  shift, and go to state 260


State 251

  106 if_stmt: KW_IF '(' expr ')' ':' stmts KW_ENDIF . ';'

    ';'  shift, and go to state 261


State 252

  105 stmts: if_stmt stmts .

    $default  reduce using rule 105 (stmts)


State 253

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'
   86 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr . ']' ':' stmts KW_ENDFOR ';'
   87      | KW_FOR IDENTIFIER KW_IN '[' expr ':' expr . ':' expr ']' ':' stmts KW_ENDFOR ';'

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    ']'        shift, and go to state 262
    '.'        shift, and go to state 84
    ':'        shift, and go to state 263


State 254

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'
   88 instr: KW_FOR comp_IDENT KW_IN '[' expr ':' expr . ']' ':' stmts KW_ENDFOR ';'
   89      | KW_FOR comp_IDENT KW_IN '[' expr ':' expr . ':' expr ']' ':' stmts KW_ENDFOR ';'

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    ']'        shift, and go to state 264
    '.'        shift, and go to state 84
    ':'        shift, and go to state 265


State 255

   90 instr: KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE . ';'

    ';'  shift, and go to state 266


State 256

   12 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' . ']' data_type ':' func_body KW_ENDDEF ';'

    ']'  shift, and go to state 267


State 257

   11 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type . ':' func_body KW_ENDDEF ';'

    ':'  shift, and go to state 268


State 258

   13 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' ':' func_body KW_ENDDEF . ';'

    ';'  shift, and go to state 269


State 259

   63 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF . ';'

    ';'  shift, and go to state 270


State 260

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  102 stmts: . instr
  103      | . instr stmts
  104      | . if_stmt
  105      | . if_stmt stmts
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'
  107        | KW_IF '(' expr ')' ':' stmts KW_ELSE ':' . stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 37
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    comp_IDENT    go to state 48
    expr          go to state 133
    func_call     go to state 136
    instr         go to state 238
    assign_instr  go to state 138
    stmts         go to state 271
    if_stmt       go to state 240


State 261

  106 if_stmt: KW_IF '(' expr ')' ':' stmts KW_ENDIF ';' .

    $default  reduce using rule 106 (if_stmt)


State 262

   86 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' . ':' stmts KW_ENDFOR ';'

    ':'  shift, and go to state 272


State 263

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   87 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' . expr ']' ':' stmts KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 273
    func_call   go to state 50


State 264

   88 instr: KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' . ':' stmts KW_ENDFOR ';'

    ':'  shift, and go to state 274


State 265

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   89 instr: KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' . expr ']' ':' stmts KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 37
    POSINT      shift, and go to state 38
    REAL        shift, and go to state 39
    STRING      shift, and go to state 40
    KW_TRUE     shift, and go to state 41
    KW_FALSE    shift, and go to state 42
    KW_NOT      shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    '('         shift, and go to state 46
    '#'         shift, and go to state 47

    comp_IDENT  go to state 48
    expr        go to state 275
    func_call   go to state 50


State 266

   90 instr: KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';' .

    $default  reduce using rule 90 (instr)


State 267

   12 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' . data_type ':' func_body KW_ENDDEF ';'
  108 data_type: . KW_BOOL
  109          | . KW_INT
  110          | . KW_SCALAR
  111          | . KW_STRING
  112          | . KW_VOID

    KW_INT     shift, and go to state 29
    KW_SCALAR  shift, and go to state 30
    KW_STRING  shift, and go to state 31
    KW_VOID    shift, and go to state 32
    KW_BOOL    shift, and go to state 33

    data_type  go to state 276


State 268

    2 comp_IDENT: . '#' IDENTIFIER
   11 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' . func_body KW_ENDDEF ';'
   18 ident: . IDENTIFIER
   19      | . IDENTIFIER '[' POSINT ']'
   20      | . IDENTIFIER '[' ']'
   21      | . IDENTIFIER ',' ident
   22      | . IDENTIFIER '[' POSINT ']' ',' ident
   23      | . IDENTIFIER '[' ']' ',' ident
   24 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   55 var: . ident ':' data_type ';'
   56    | . ident ':' IDENTIFIER ';'
   57 func_body: . %empty  [KW_ENDDEF]
   58          | . var func_body
   59          | . const func_body
   60          | . instr func_body
   61          | . if_stmt func_body
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 125
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    $default  reduce using rule 57 (func_body)

    comp_IDENT    go to state 48
    ident         go to state 9
    const         go to state 132
    expr          go to state 133
    var           go to state 134
    func_body     go to state 277
    func_call     go to state 136
    instr         go to state 137
    assign_instr  go to state 138
    if_stmt       go to state 139


State 269

   13 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' ':' func_body KW_ENDDEF ';' .

    $default  reduce using rule 13 (comp_func_decl)


State 270

   63 func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';' .

    $default  reduce using rule 63 (func_decl)


State 271

  107 if_stmt: KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts . KW_ENDIF ';'

    KW_ENDIF  shift, and go to state 278


State 272

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   86      | KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' . stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  102 stmts: . instr
  103      | . instr stmts
  104      | . if_stmt
  105      | . if_stmt stmts
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 37
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    comp_IDENT    go to state 48
    expr          go to state 133
    func_call     go to state 136
    instr         go to state 238
    assign_instr  go to state 138
    stmts         go to state 279
    if_stmt       go to state 240


State 273

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'
   87 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr . ']' ':' stmts KW_ENDFOR ';'

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    ']'        shift, and go to state 280
    '.'        shift, and go to state 84


State 274

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' . stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  102 stmts: . instr
  103      | . instr stmts
  104      | . if_stmt
  105      | . if_stmt stmts
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 37
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    comp_IDENT    go to state 48
    expr          go to state 133
    func_call     go to state 136
    instr         go to state 238
    assign_instr  go to state 138
    stmts         go to state 281
    if_stmt       go to state 240


State 275

   27 expr: expr . OP_POWER expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | expr . '*' expr
   31     | expr . '/' expr
   32     | expr . '%' expr
   33     | expr . OP_EQUALS expr
   34     | expr . OP_NOT_EQ expr
   35     | expr . OP_LS expr
   36     | expr . OP_GRT expr
   37     | expr . OP_LS_EQ expr
   38     | expr . OP_GRT_EQ expr
   40     | expr . KW_AND expr
   41     | expr . KW_OR expr
   49     | expr . '.' comp_IDENT
   50     | expr . '.' comp_IDENT '[' expr ']'
   67 func_call: expr . '.' IDENTIFIER '(' func_input ')'
   89 instr: KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr . ']' ':' stmts KW_ENDFOR ';'

    KW_AND     shift, and go to state 70
    KW_OR      shift, and go to state 71
    OP_POWER   shift, and go to state 72
    OP_EQUALS  shift, and go to state 73
    OP_NOT_EQ  shift, and go to state 74
    OP_LS      shift, and go to state 75
    OP_LS_EQ   shift, and go to state 76
    OP_GRT     shift, and go to state 77
    OP_GRT_EQ  shift, and go to state 78
    '+'        shift, and go to state 79
    '-'        shift, and go to state 80
    '*'        shift, and go to state 81
    '/'        shift, and go to state 82
    '%'        shift, and go to state 83
    ']'        shift, and go to state 282
    '.'        shift, and go to state 84


State 276

   12 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type . ':' func_body KW_ENDDEF ';'

    ':'  shift, and go to state 283


State 277

   11 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' func_body . KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 284


State 278

  107 if_stmt: KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF . ';'

    ';'  shift, and go to state 285


State 279

   86 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts . KW_ENDFOR ';'

    KW_ENDFOR  shift, and go to state 286


State 280

   87 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' . ':' stmts KW_ENDFOR ';'

    ':'  shift, and go to state 287


State 281

   88 instr: KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts . KW_ENDFOR ';'

    KW_ENDFOR  shift, and go to state 288


State 282

   89 instr: KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' . ':' stmts KW_ENDFOR ';'

    ':'  shift, and go to state 289


State 283

    2 comp_IDENT: . '#' IDENTIFIER
   12 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' . func_body KW_ENDDEF ';'
   18 ident: . IDENTIFIER
   19      | . IDENTIFIER '[' POSINT ']'
   20      | . IDENTIFIER '[' ']'
   21      | . IDENTIFIER ',' ident
   22      | . IDENTIFIER '[' POSINT ']' ',' ident
   23      | . IDENTIFIER '[' ']' ',' ident
   24 const: . KW_CONST IDENTIFIER '=' expr ':' data_type ';'
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   55 var: . ident ':' data_type ';'
   56    | . ident ':' IDENTIFIER ';'
   57 func_body: . %empty  [KW_ENDDEF]
   58          | . var func_body
   59          | . const func_body
   60          | . instr func_body
   61          | . if_stmt func_body
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 125
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_CONST     shift, and go to state 5
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    $default  reduce using rule 57 (func_body)

    comp_IDENT    go to state 48
    ident         go to state 9
    const         go to state 132
    expr          go to state 133
    var           go to state 134
    func_body     go to state 290
    func_call     go to state 136
    instr         go to state 137
    assign_instr  go to state 138
    if_stmt       go to state 139


State 284

   11 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF . ';'

    ';'  shift, and go to state 291


State 285

  107 if_stmt: KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';' .

    $default  reduce using rule 107 (if_stmt)


State 286

   86 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR . ';'

    ';'  shift, and go to state 292


State 287

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' . stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  102 stmts: . instr
  103      | . instr stmts
  104      | . if_stmt
  105      | . if_stmt stmts
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 37
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    comp_IDENT    go to state 48
    expr          go to state 133
    func_call     go to state 136
    instr         go to state 238
    assign_instr  go to state 138
    stmts         go to state 293
    if_stmt       go to state 240


State 288

   88 instr: KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR . ';'

    ';'  shift, and go to state 294


State 289

    2 comp_IDENT: . '#' IDENTIFIER
   25 expr: . '+' expr
   26     | . '-' expr
   27     | . expr OP_POWER expr
   28     | . expr '+' expr
   29     | . expr '-' expr
   30     | . expr '*' expr
   31     | . expr '/' expr
   32     | . expr '%' expr
   33     | . expr OP_EQUALS expr
   34     | . expr OP_NOT_EQ expr
   35     | . expr OP_LS expr
   36     | . expr OP_GRT expr
   37     | . expr OP_LS_EQ expr
   38     | . expr OP_GRT_EQ expr
   39     | . KW_NOT expr
   40     | . expr KW_AND expr
   41     | . expr KW_OR expr
   42     | . '(' expr ')'
   43     | . func_call
   44     | . KW_TRUE
   45     | . KW_FALSE
   46     | . IDENTIFIER '[' expr ']'
   47     | . comp_IDENT
   48     | . comp_IDENT '[' expr ']'
   49     | . expr '.' comp_IDENT
   50     | . expr '.' comp_IDENT '[' expr ']'
   51     | . IDENTIFIER
   52     | . STRING
   53     | . REAL
   54     | . POSINT
   66 func_call: . IDENTIFIER '(' func_input ')'
   67          | . expr '.' IDENTIFIER '(' func_input ')'
   85 instr: . assign_instr ';'
   86      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   87      | . KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   88      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | . KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';'
   89      | KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' . stmts KW_ENDFOR ';'
   90      | . KW_WHILE '(' expr ')' ':' stmts KW_ENDWHILE ';'
   91      | . KW_BREAK ';'
   92      | . KW_CONTINUE ';'
   93      | . KW_RETURN ';'
   94      | . KW_RETURN expr ';'
   95      | . func_call ';'
   96 assign_instr: . expr '=' expr
   97             | . expr OP_ASGN_ADD expr
   98             | . expr OP_ASGN_SUB expr
   99             | . expr OP_ASGN_MUL expr
  100             | . expr OP_ASGN_DIV expr
  101             | . expr OP_ASGN_MOD expr
  102 stmts: . instr
  103      | . instr stmts
  104      | . if_stmt
  105      | . if_stmt stmts
  106 if_stmt: . KW_IF '(' expr ')' ':' stmts KW_ENDIF ';'
  107        | . KW_IF '(' expr ')' ':' stmts KW_ELSE ':' stmts KW_ENDIF ';'

    IDENTIFIER   shift, and go to state 37
    POSINT       shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    KW_TRUE      shift, and go to state 41
    KW_FALSE     shift, and go to state 42
    KW_IF        shift, and go to state 126
    KW_FOR       shift, and go to state 127
    KW_WHILE     shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_CONTINUE  shift, and go to state 130
    KW_NOT       shift, and go to state 43
    KW_RETURN    shift, and go to state 131
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45
    '('          shift, and go to state 46
    '#'          shift, and go to state 47

    comp_IDENT    go to state 48
    expr          go to state 133
    func_call     go to state 136
    instr         go to state 238
    assign_instr  go to state 138
    stmts         go to state 295
    if_stmt       go to state 240


State 290

   12 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body . KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 296


State 291

   11 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT data_type ':' func_body KW_ENDDEF ';' .

    $default  reduce using rule 11 (comp_func_decl)


State 292

   86 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';' .

    $default  reduce using rule 86 (instr)


State 293

   87 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts . KW_ENDFOR ';'

    KW_ENDFOR  shift, and go to state 297


State 294

   88 instr: KW_FOR comp_IDENT KW_IN '[' expr ':' expr ']' ':' stmts KW_ENDFOR ';' .

    $default  reduce using rule 88 (instr)


State 295

   89 instr: KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts . KW_ENDFOR ';'

    KW_ENDFOR  shift, and go to state 298


State 296

   12 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF . ';'

    ';'  shift, and go to state 299


State 297

   87 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR . ';'

    ';'  shift, and go to state 300


State 298

   89 instr: KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR . ';'

    ';'  shift, and go to state 301


State 299

   12 comp_func_decl: KW_DEF IDENTIFIER '(' parameters ')' '-' OP_GRT '[' ']' data_type ':' func_body KW_ENDDEF ';' .

    $default  reduce using rule 12 (comp_func_decl)


State 300

   87 instr: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';' .

    $default  reduce using rule 87 (instr)


State 301

   89 instr: KW_FOR comp_IDENT KW_IN '[' expr ':' expr ':' expr ']' ':' stmts KW_ENDFOR ';' .

    $default  reduce using rule 89 (instr)
